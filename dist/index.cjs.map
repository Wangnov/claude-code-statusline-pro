{"version":3,"sources":["../src/config/schema.ts","../src/config/loader.ts","../src/components/base.ts","../src/components/branch.ts","../src/components/model.ts","../src/components/project.ts","../src/components/status.ts","../src/components/tokens.ts","../src/terminal/colors.ts","../src/terminal/detector.ts","../src/core/generator.ts","../src/index.ts","../src/cli/config-editor.ts","../src/cli/mock-data.ts","../src/cli/preview-engine.ts","../src/cli/message-icons.ts","../src/core/parser.ts","../src/utils/index.ts"],"sourcesContent":["import { z } from 'zod';\n\n// ==================== Transcript 相关类型 ====================\n\n/**\n * Token使用信息模式 | Token usage info schema\n */\nexport const UsageInfoSchema = z.object({\n  input_tokens: z.number(),\n  cache_creation_input_tokens: z.number(),\n  cache_read_input_tokens: z.number(),\n  output_tokens: z.number(),\n});\n\nexport type UsageInfo = z.infer<typeof UsageInfoSchema>;\n\n/**\n * Transcript条目模式 | Transcript entry schema\n */\nexport const TranscriptEntrySchema = z\n  .object({\n    type: z.string(),\n    message: z\n      .object({\n        usage: UsageInfoSchema.optional(),\n        stop_reason: z.string().optional(),\n        content: z.array(z.unknown()).optional(),\n      })\n      .optional(),\n  })\n  .passthrough();\n\nexport type TranscriptEntry = z.infer<typeof TranscriptEntrySchema>;\n\n// ==================== 基础配置类型 ====================\n\n// 颜色枚举\nconst ColorSchema = z.enum([\n  'black',\n  'red',\n  'green',\n  'yellow',\n  'blue',\n  'magenta',\n  'cyan',\n  'white',\n  'gray',\n  'bright_red',\n  'bright_green',\n  'bright_yellow',\n  'bright_blue',\n  'bright_magenta',\n  'bright_cyan',\n  'bright_white',\n]);\n\n// 自动检测选项\nconst AutoDetectSchema = z.union([z.boolean(), z.literal('auto')]);\n\n// 基础组件配置\nconst BaseComponentSchema = z.object({\n  enabled: z.boolean().default(true),\n  icon: z.string(),\n  nerd_icon: z.string().optional(),\n  text_icon: z.string().optional(),\n  color: ColorSchema,\n});\n\n// 项目组件配置 | Project component config\nexport const ProjectComponentSchema = BaseComponentSchema.extend({\n  show_when_empty: z.boolean().default(false),\n});\n\n// 模型组件配置 | Model component config\nexport const ModelComponentSchema = BaseComponentSchema.extend({\n  show_full_name: z.boolean().default(false),\n  custom_names: z.record(z.string(), z.string()).default({}),\n});\n\n// 分支组件配置 | Branch component config\nexport const BranchComponentSchema = BaseComponentSchema.extend({\n  show_when_no_git: z.boolean().default(false),\n  max_length: z.number().min(1).default(20),\n});\n\n// Token 阈值配置 | Token threshold config\nconst TokenThresholdsSchema = z.object({\n  warning: z.number().min(0).max(100).default(60),\n  danger: z.number().min(0).max(100).default(85),\n  backup: z.number().min(0).max(100).default(85),\n  critical: z.number().min(0).max(100).default(95),\n});\n\n// Token 颜色配置 | Token color config\nconst TokenColorsSchema = z.object({\n  safe: ColorSchema.default('green'),\n  warning: ColorSchema.default('yellow'),\n  danger: ColorSchema.default('red'),\n});\n\n// Token 状态图标配置 | Token status icon config\nconst TokenStatusIconsSchema = z.object({\n  backup: z.string().default('⚡'),\n  critical: z.string().default('🔥'),\n});\n\n// Token 组件配置 | Token component config\nexport const TokenComponentSchema = BaseComponentSchema.extend({\n  show_progress_bar: z.boolean().default(true),\n  show_percentage: z.boolean().default(true),\n  show_raw_numbers: z.boolean().default(false),\n  context_window: z.number().default(200000),\n  progress_bar_width: z.number().default(10),\n  progress_bar_chars: z\n    .object({\n      filled: z.string().default('█'),\n      empty: z.string().default('░'),\n      backup: z.string().default('▓'),\n    })\n    .optional(),\n  colors: TokenColorsSchema.optional(),\n  thresholds: TokenThresholdsSchema.optional(),\n  status_icons: TokenStatusIconsSchema.optional(),\n  status_nerd_icons: TokenStatusIconsSchema.optional(),\n  status_text_icons: TokenStatusIconsSchema.optional(),\n});\n\n// 状态图标配置 | Status icon config\nconst StatusIconsSchema = z.object({\n  ready: z.string().default('✅'),\n  thinking: z.string().default('💭'),\n  tool: z.string().default('🔧'),\n  error: z.string().default('❌'),\n  warning: z.string().default('⚠️'),\n});\n\n// 状态颜色配置 | Status color config\nconst StatusColorsSchema = z.object({\n  ready: ColorSchema.default('green'),\n  thinking: ColorSchema.default('yellow'),\n  tool: ColorSchema.default('blue'),\n  error: ColorSchema.default('red'),\n  warning: ColorSchema.default('yellow'),\n});\n\n// 状态组件配置 | Status component config\nexport const StatusComponentSchema = BaseComponentSchema.extend({\n  show_recent_errors: z.boolean().default(true),\n  icons: StatusIconsSchema.optional(),\n  nerd_icons: StatusIconsSchema.optional(),\n  text_icons: StatusIconsSchema.optional(),\n  colors: StatusColorsSchema.optional(),\n});\n\n// 组件配置集合 | Components config collection\nconst ComponentsSchema = z.object({\n  order: z.array(z.string()).default(['project', 'model', 'branch', 'tokens', 'status']),\n  project: ProjectComponentSchema.optional(),\n  model: ModelComponentSchema.optional(),\n  branch: BranchComponentSchema.optional(),\n  tokens: TokenComponentSchema.optional(),\n  status: StatusComponentSchema.optional(),\n});\n\n// 样式配置 | Style config\nconst StyleSchema = z.object({\n  separator: z.string().default(' | '),\n  enable_colors: AutoDetectSchema.default('auto'),\n  enable_emoji: AutoDetectSchema.default('auto'),\n  enable_nerd_font: AutoDetectSchema.default('auto'),\n  compact_mode: z.boolean().default(false),\n  max_width: z.number().min(0).default(0),\n});\n\n// 高级配置 | Advanced config\nconst AdvancedSchema = z.object({\n  cache_enabled: z.boolean().default(true),\n  recent_error_count: z.number().min(1).default(5),\n  git_timeout: z.number().min(100).default(1000),\n  debug_mode: z.boolean().default(false),\n  custom_color_codes: z.record(z.string(), z.string()).default({}),\n});\n\n// 实验性功能配置 | Experimental features config\nconst ExperimentalSchema = z.object({\n  show_context_health: z.boolean().default(false),\n  adaptive_colors: z.boolean().default(false),\n  show_timestamp: z.boolean().default(false),\n  show_session_info: z.boolean().default(false),\n  force_nerd_font: z.boolean().default(false),\n});\n\n// 预设映射配置 | Preset mapping config\nconst PresetMappingSchema = z\n  .object({\n    P: z.literal('project'),\n    M: z.literal('model'),\n    B: z.literal('branch'),\n    T: z.literal('tokens'),\n    S: z.literal('status'),\n  })\n  .default({\n    P: 'project',\n    M: 'model',\n    B: 'branch',\n    T: 'tokens',\n    S: 'status',\n  });\n\n// 模板配置 | Template config\nconst TemplateConfigSchema = z\n  .object({\n    description: z.string().optional(),\n    style: StyleSchema.partial().optional(),\n    components: ComponentsSchema.partial().optional(),\n  })\n  .passthrough(); // 允许额外字段\n\nconst TemplatesSchema = z.record(z.string(), TemplateConfigSchema).optional();\n\n// 主配置 schema | Main config schema\nexport const ConfigSchema = z\n  .object({\n    preset: z.string().default('PMBTS'),\n    theme: z.string().optional(),\n    preset_mapping: PresetMappingSchema.optional(),\n    components: ComponentsSchema.optional(),\n    style: StyleSchema.optional(),\n    advanced: AdvancedSchema.optional(),\n    experimental: ExperimentalSchema.optional(),\n    templates: TemplatesSchema,\n  })\n  .passthrough(); // 允许额外字段\n\n// 输入数据 schema | Input data schema\nexport const InputDataSchema = z\n  .object({\n    // 支持两种字段名格式\n    hook_event_name: z.string().optional(),\n    hookEventName: z.string().optional(),\n    session_id: z.string().optional(),\n    sessionId: z.string().optional(),\n    transcript_path: z.string().optional(),\n    transcriptPath: z.string().optional(),\n    cwd: z.string().optional(),\n    model: z\n      .object({\n        id: z.string().optional(),\n        display_name: z.string().optional(),\n      })\n      .optional(),\n    workspace: z\n      .object({\n        current_dir: z.string().optional(),\n        project_dir: z.string().optional(),\n      })\n      .optional(),\n    gitBranch: z.string().optional(),\n    git: z\n      .object({\n        branch: z.string().optional(),\n        status: z.string().optional(),\n        ahead: z.number().optional(),\n        behind: z.number().optional(),\n      })\n      .optional(),\n  })\n  .passthrough() // 允许额外字段\n  .transform((data) => ({\n    hookEventName: data.hookEventName || data.hook_event_name || 'Status',\n    sessionId: data.sessionId || data.session_id || null,\n    transcriptPath: data.transcriptPath || data.transcript_path || null,\n    cwd: data.cwd || process.cwd(),\n    model: data.model || {},\n    workspace: data.workspace || {},\n    gitBranch: data.gitBranch || data.git?.branch || null,\n  }));\n\n// 渲染上下文 schema | Render context schema\nexport const RenderContextSchema = z.object({\n  inputData: InputDataSchema,\n  capabilities: z.object({\n    colors: z.boolean(),\n    emoji: z.boolean(),\n    nerdFont: z.boolean(),\n  }),\n  colors: z.record(z.string(), z.string()),\n  icons: z.record(z.string(), z.string()),\n  config: ConfigSchema,\n});\n\n// 基础组件配置类型 | Base component config type\nexport type ComponentConfig = z.infer<typeof BaseComponentSchema>;\n\n// 样式配置类型\nexport type StyleConfig = z.infer<typeof StyleSchema>;\n\n// 主题配置类型 (简化处理)\nexport interface ThemeConfig {\n  name: string;\n  style?: Partial<StyleConfig>;\n  components?: Partial<z.infer<typeof ComponentsSchema>>;\n}\n\n// 组件选项和元数据类型\nexport interface ComponentOptions {\n  id: string;\n  enabled?: boolean;\n  [key: string]: unknown;\n}\n\nexport interface ComponentMetadata {\n  name: string;\n  version: string;\n  description?: string;\n  dependencies?: string[];\n}\n\nexport interface RenderOptions {\n  forceColors?: boolean;\n  forceEmoji?: boolean;\n  forceNerdFont?: boolean;\n  maxWidth?: number;\n}\n\n// CLI相关类型定义\nexport interface LivePreviewOptions {\n  configPath?: string;\n  theme?: string;\n  refreshInterval?: number;\n  maxScenarios?: number;\n  debug?: boolean;\n  dynamicBanner?: boolean;\n}\n\nexport interface ConfigEditorOptions {\n  configPath?: string;\n  enableLivePreview?: boolean;\n  autoSave?: boolean;\n}\n\nexport interface MockScenario {\n  id: string;\n  name: string;\n  description: string;\n  inputData: InputData;\n  tokenUsage?: number;\n  expectedStatus?: 'ready' | 'thinking' | 'tool_use' | 'error' | 'complete';\n}\n\n// 导出类型定义 | Export type definitions\nexport type Config = z.infer<typeof ConfigSchema>;\nexport type InputData = z.infer<typeof InputDataSchema>;\nexport type RenderContext = z.infer<typeof RenderContextSchema>;\nexport type ProjectComponentConfig = z.infer<typeof ProjectComponentSchema>;\nexport type ModelComponentConfig = z.infer<typeof ModelComponentSchema>;\nexport type BranchComponentConfig = z.infer<typeof BranchComponentSchema>;\nexport type TokensComponentConfig = z.infer<typeof TokenComponentSchema>;\nexport type StatusComponentConfig = z.infer<typeof StatusComponentSchema>;\n","import fs from 'node:fs';\nimport path from 'node:path';\nimport TOML from '@iarna/toml';\nimport type { ZodError } from 'zod';\nimport { type Config, ConfigSchema } from './schema.js';\n\n// 获取当前目录，兼容 ESM 和 CJS\nfunction getCurrentDir(): string {\n  // CJS 环境\n  try {\n    // @ts-ignore - __dirname may not exist in ESM\n    if (typeof __dirname !== 'undefined') {\n      return __dirname;\n    }\n  } catch {\n    // 忽略错误\n  }\n\n  // ESM 环境回退 - 使用同步方式\n  try {\n    if (typeof import.meta !== 'undefined' && import.meta.url) {\n      // 直接构建路径，避免异步导入\n      const url = import.meta.url;\n      if (url.startsWith('file://')) {\n        return path.dirname(url.slice(7)); // 移除 'file://' 前缀\n      }\n    }\n  } catch {\n    // 忽略错误\n  }\n\n  // 最终回退到当前工作目录\n  return process.cwd();\n}\n\nexport interface ConfigLoadOptions {\n  customPath?: string | undefined;\n  overridePreset?: string | undefined;\n}\n\nexport class ConfigLoader {\n  private cachedConfig: Config | null = null;\n  private configPath: string | null = null;\n\n  /**\n   * 查找配置文件 | Find config file\n   */\n  private findConfigFile(): string | null {\n    const possiblePaths = [\n      // 当前目录 | Current directory\n      path.join(process.cwd(), 'statusline.config.toml'),\n      path.join(process.cwd(), '.statusline.toml'),\n\n      // 用户主目录 | User home directory\n      path.join(\n        process.env.HOME || process.env.USERPROFILE || '',\n        '.config',\n        'claude-statusline',\n        'config.toml'\n      ),\n      path.join(process.env.HOME || process.env.USERPROFILE || '', '.statusline.toml'),\n\n      // 包目录 | Package directory (fallback)\n      path.join(getCurrentDir(), '../../statusline.config.toml'),\n    ];\n\n    for (const configPath of possiblePaths) {\n      if (fs.existsSync(configPath)) {\n        return configPath;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * 深度合并对象 | Deep merge objects\n   */\n  private deepMerge<T extends Record<string, unknown>>(target: T, source: Partial<T>): T {\n    const result = { ...target };\n\n    for (const key in source) {\n      const sourceValue = source[key];\n      const targetValue = result[key];\n\n      if (sourceValue && typeof sourceValue === 'object' && !Array.isArray(sourceValue)) {\n        result[key] = this.deepMerge(\n          targetValue || ({} as Record<string, unknown>),\n          sourceValue\n        ) as T[Extract<keyof T, string>];\n      } else if (sourceValue !== undefined) {\n        result[key] = sourceValue as T[Extract<keyof T, string>];\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * 清理对象中的 Symbol 属性 | Clean Symbol properties from objects\n   * TOML 解析器会在数组上添加 Symbol 元数据，需要清理以避免序列化错误\n   */\n  private cleanSymbols(obj: unknown): unknown {\n    if (obj === null || typeof obj !== 'object') {\n      return obj;\n    }\n\n    if (Array.isArray(obj)) {\n      // 清理数组的 Symbol 属性，创建新的纯数组\n      return obj.map((item) => this.cleanSymbols(item));\n    }\n\n    // 对象：只保留字符串键的属性，忽略 Symbol 键\n    const cleaned: Record<string, unknown> = {};\n    for (const [key, value] of Object.entries(obj)) {\n      cleaned[key] = this.cleanSymbols(value);\n    }\n\n    return cleaned;\n  }\n\n  /**\n   * 应用预设配置 | Apply preset configuration\n   */\n  private applyPreset(config: Config): Config {\n    if (!config.preset) return config;\n\n    const preset = config.preset.toUpperCase();\n    const mapping = config.preset_mapping;\n\n    // 如果没有映射配置，使用默认值\n    if (!mapping) {\n      console.warn('No preset mapping found, using default');\n      return config;\n    }\n\n    // 验证预设字符串 | Validate preset string\n    for (const char of preset) {\n      if (!(char in mapping)) {\n        console.warn(`Unknown preset character: ${char}`);\n        return config;\n      }\n    }\n\n    // 生成组件顺序 | Generate component order\n    const newOrder: string[] = [];\n    for (const char of preset) {\n      const componentName = mapping[char as keyof typeof mapping];\n      if (componentName) {\n        newOrder.push(componentName);\n      }\n    }\n\n    // 更新配置 | Update config\n    const updatedConfig = { ...config };\n    if (!updatedConfig.components) {\n      updatedConfig.components = {\n        order: newOrder,\n      };\n    } else {\n      updatedConfig.components.order = newOrder;\n    }\n\n    // 更新组件启用状态 | Update component enabled status\n    const allComponents = Object.values(mapping);\n    for (const componentName of allComponents) {\n      if (updatedConfig.components) {\n        const component =\n          updatedConfig.components[componentName as keyof typeof updatedConfig.components];\n        if (component && typeof component === 'object' && 'enabled' in component) {\n          (component as Record<string, unknown>).enabled = newOrder.includes(componentName);\n        }\n      }\n    }\n\n    return updatedConfig;\n  }\n\n  /**\n   * 应用主题配置覆盖 | Apply theme config overrides\n   */\n  private async applyThemeConfig(config: Config): Promise<Config> {\n    if (!config.theme) return config;\n\n    // 首先尝试从模板中加载主题 | First try loading theme from templates\n    const templateConfig = config.templates?.[config.theme];\n    if (templateConfig) {\n      // 使用TOML中定义的模板配置 | Use template config from TOML\n      return this.applyTemplateConfig(config, templateConfig);\n    }\n\n    console.warn(`Theme \"${config.theme}\" not found in templates`);\n    return config;\n  }\n\n  /**\n   * 应用模板配置 | Apply template config\n   */\n  private applyTemplateConfig(config: Config, templateConfig: any): Config {\n    const mergedConfig = { ...config };\n\n    // 应用模板的样式配置 | Apply template style config\n    if (templateConfig.style) {\n      mergedConfig.style = {\n        ...mergedConfig.style,\n        ...templateConfig.style,\n      };\n    }\n\n    // 应用模板的组件配置 | Apply template components config\n    if (templateConfig.components) {\n      if (!mergedConfig.components) {\n        mergedConfig.components = {} as any;\n      }\n\n      // 对于每个组件，深度合并配置 | Deep merge config for each component\n      const knownComponents = ['project', 'model', 'branch', 'tokens', 'status'] as const;\n      for (const componentName of knownComponents) {\n        const templateComponentConfig = templateConfig.components[componentName];\n        if (templateComponentConfig) {\n          if (!mergedConfig.components[componentName]) {\n            mergedConfig.components[componentName] = {} as any;\n          }\n          mergedConfig.components[componentName] = {\n            ...mergedConfig.components[componentName],\n            ...templateComponentConfig,\n          };\n        }\n      }\n\n      // 应用组件顺序 | Apply component order\n      if (templateConfig.components.order) {\n        mergedConfig.components.order = templateConfig.components.order;\n      }\n    }\n\n    return mergedConfig;\n  }\n\n  /**\n   * 加载配置 | Load configuration\n   */\n  async loadConfig(options: ConfigLoadOptions = {}): Promise<Config> {\n    try {\n      // 使用缓存 | Use cache if available\n      if (this.cachedConfig && !options.customPath && !options.overridePreset) {\n        return this.cachedConfig;\n      }\n\n      // 查找配置文件 | Find config file\n      this.configPath = options.customPath || this.findConfigFile();\n\n      let userConfig: Partial<Config> = {};\n\n      if (this.configPath && fs.existsSync(this.configPath)) {\n        try {\n          const configContent = await fs.promises.readFile(this.configPath, 'utf8');\n          const parsedToml = TOML.parse(configContent);\n          // 深度清理 TOML 解析后的 Symbol 属性\n          userConfig = this.cleanSymbols(parsedToml) as Partial<Config>;\n        } catch (error) {\n          console.warn(`Failed to parse config file ${this.configPath}:`, error);\n        }\n      }\n\n      // 命令行预设覆盖 | Command line preset override\n      if (options.overridePreset) {\n        userConfig.preset = options.overridePreset;\n      }\n\n      // 使用 Zod 解析和验证配置 | Parse and validate with Zod\n      if (process.env.DEBUG) {\n        console.error(\n          'Before ConfigSchema.parse, userConfig:',\n          JSON.stringify(userConfig, null, 2)\n        );\n      }\n      const config = ConfigSchema.parse(userConfig);\n      if (process.env.DEBUG) {\n        console.error('After ConfigSchema.parse, config keys:', Object.keys(config));\n      }\n\n      // 应用预设 | Apply preset\n      let finalConfig = this.applyPreset(config);\n\n      // 应用主题配置 | Apply theme config\n      if (finalConfig.theme) {\n        finalConfig = await this.applyThemeConfig(finalConfig);\n      }\n\n      // 缓存配置 | Cache config\n      this.cachedConfig = finalConfig;\n\n      return finalConfig;\n    } catch (error) {\n      if (error instanceof Error && 'issues' in error) {\n        // Zod 验证错误 | Zod validation error\n        const zodError = error as ZodError;\n        console.error('Configuration validation failed:');\n        for (const issue of zodError.issues) {\n          console.error(`  ${issue.path.join('.')}: ${issue.message}`);\n        }\n      } else {\n        console.error('Failed to load configuration:', error);\n      }\n\n      // 返回默认配置 | Return default config\n      console.warn('Using default configuration');\n      const defaultConfig = ConfigSchema.parse({});\n      this.cachedConfig = this.applyPreset(defaultConfig);\n      return this.cachedConfig;\n    }\n  }\n\n  /**\n   * 获取配置路径 | Get config path\n   */\n  getConfigPath(): string | null {\n    return this.configPath;\n  }\n\n  /**\n   * 清除缓存 | Clear cache\n   */\n  clearCache(): void {\n    this.cachedConfig = null;\n  }\n\n  /**\n   * 验证配置文件 | Validate config file\n   */\n  async validateConfig(configPath?: string): Promise<{ valid: boolean; errors: string[] }> {\n    const errors: string[] = [];\n\n    try {\n      const targetPath = configPath || this.findConfigFile();\n\n      if (!targetPath || !fs.existsSync(targetPath)) {\n        errors.push('Configuration file not found');\n        return { valid: false, errors };\n      }\n\n      const configContent = await fs.promises.readFile(targetPath, 'utf8');\n      const parsedToml = TOML.parse(configContent);\n\n      // 验证配置 | Validate config\n      ConfigSchema.parse(parsedToml);\n\n      return { valid: true, errors: [] };\n    } catch (error) {\n      if (error instanceof Error && 'issues' in error) {\n        const zodError = error as ZodError;\n        for (const issue of zodError.issues) {\n          errors.push(`${issue.path.join('.')}: ${issue.message}`);\n        }\n      } else {\n        errors.push(error instanceof Error ? error.message : 'Unknown error');\n      }\n\n      return { valid: false, errors };\n    }\n  }\n\n  /**\n   * 别名方法 - 为了向后兼容\n   */\n  async load(configPath?: string): Promise<Config> {\n    return this.loadConfig({ customPath: configPath });\n  }\n\n  /**\n   * 获取配置源路径\n   */\n  getConfigSource(): string | null {\n    return this.configPath;\n  }\n\n  /**\n   * 检查配置文件是否存在\n   */\n  async configExists(configPath?: string): Promise<boolean> {\n    const targetPath = configPath || this.findConfigFile();\n    return targetPath !== null && fs.existsSync(targetPath);\n  }\n\n  /**\n   * 创建默认配置文件\n   */\n  async createDefaultConfig(configPath?: string): Promise<void> {\n    const defaultConfig = ConfigSchema.parse({});\n    const targetPath = configPath || path.join(process.cwd(), 'statusline.config.toml');\n\n    const tomlContent = TOML.stringify(defaultConfig as TOML.JsonMap);\n    await fs.promises.writeFile(targetPath, tomlContent, 'utf8');\n\n    this.configPath = targetPath;\n    this.cachedConfig = defaultConfig;\n  }\n\n  /**\n   * 保存配置到文件\n   */\n  async save(config: Config, configPath?: string): Promise<void> {\n    const targetPath =\n      configPath || this.configPath || path.join(process.cwd(), 'statusline.config.toml');\n    const tomlContent = TOML.stringify(config as TOML.JsonMap);\n    await fs.promises.writeFile(targetPath, tomlContent, 'utf8');\n    this.cachedConfig = config;\n    this.configPath = targetPath;\n  }\n\n  /**\n   * 重置配置到默认值\n   */\n  async resetToDefaults(configPath?: string): Promise<void> {\n    const defaultConfig = ConfigSchema.parse({});\n    await this.save(defaultConfig, configPath);\n  }\n\n  /**\n   * 应用主题\n   */\n  async applyTheme(themeName: string, configPath?: string): Promise<void> {\n    const currentConfig = await this.load(configPath);\n\n    // 这里应该有主题配置逻辑，暂时简化处理\n    const themedConfig = {\n      ...currentConfig,\n      theme: themeName,\n    };\n\n    await this.save(themedConfig, configPath);\n  }\n\n  /**\n   * 获取默认配置\n   */\n  getDefaultConfig(): Config {\n    return ConfigSchema.parse({});\n  }\n}\n\n// 导出单例实例 | Export singleton instance\nexport const configLoader = new ConfigLoader();\n","import type { ComponentConfig, RenderContext } from '../config/schema.js';\n\n/**\n * 组件渲染结果接口 | Component render result interface\n */\nexport interface ComponentResult {\n  /** 渲染后的字符串内容，null表示不显示 | Rendered string content, null means not displayed */\n  content: string | null;\n  /** 是否成功渲染 | Whether rendering was successful */\n  success: boolean;\n  /** 错误信息（如果有） | Error message (if any) */\n  error?: string;\n}\n\n/**\n * 组件基类接口 | Component base interface\n */\nexport interface Component {\n  /** 组件名称 | Component name */\n  readonly name: string;\n  /** 是否启用 | Whether enabled */\n  readonly enabled: boolean;\n  /** 渲染组件 | Render component */\n  render(context: RenderContext): ComponentResult | Promise<ComponentResult>;\n}\n\n/**\n * 抽象组件基类 | Abstract component base class\n * 提供通用的组件功能和模板方法 | Provides common component functionality and template methods\n */\nexport abstract class BaseComponent implements Component {\n  public readonly name: string;\n  protected config: ComponentConfig;\n  protected renderContext?: RenderContext;\n\n  constructor(name: string, config: ComponentConfig) {\n    this.name = name;\n    this.config = config;\n  }\n\n  /** 组件是否启用 | Whether component is enabled */\n  get enabled(): boolean {\n    return this.config.enabled ?? true;\n  }\n\n  /**\n   * 渲染组件 | Render component\n   */\n  public render(context: RenderContext): ComponentResult | Promise<ComponentResult> {\n    this.renderContext = context;\n\n    // 检查组件是否启用 | Check if component is enabled\n    if (!this.enabled) {\n      return { content: null, success: true };\n    }\n\n    try {\n      const content = this.renderContent(context);\n\n      // 处理异步渲染 | Handle async rendering\n      if (content instanceof Promise) {\n        return content\n          .then((result) => ({ content: result, success: true }))\n          .catch((error) => ({\n            content: null,\n            success: false,\n            error: error instanceof Error ? error.message : String(error),\n          }));\n      }\n\n      return { content, success: true };\n    } catch (error) {\n      return {\n        content: null,\n        success: false,\n        error: error instanceof Error ? error.message : String(error),\n      };\n    }\n  }\n\n  /**\n   * 渲染组件内容 - 子类需要实现 | Render component content - subclasses need to implement\n   */\n  protected abstract renderContent(context: RenderContext): string | null | Promise<string | null>;\n\n  /**\n   * 获取颜色代码 | Get color code\n   */\n  protected getColor(colorName: string): string {\n    if (!this.renderContext?.colors) return '';\n    return this.renderContext.colors[colorName] || '';\n  }\n\n  /**\n   * 获取重置颜色代码 | Get reset color code\n   */\n  protected getResetColor(): string {\n    if (!this.renderContext?.colors) return '';\n    return this.renderContext.colors.reset || '';\n  }\n\n  /**\n   * 获取图标 | Get icon\n   */\n  protected getIcon(iconName: string): string {\n    if (!this.renderContext?.icons) return '';\n    return this.renderContext.icons[iconName] || '';\n  }\n\n  /**\n   * 应用颜色和重置 | Apply color and reset\n   */\n  protected colorize(content: string, colorName: string): string {\n    if (!content) return '';\n    if (!this.renderContext?.capabilities?.colors) return content;\n    const color = this.getColor(colorName);\n    const reset = this.getResetColor();\n    return `${color}${content}${reset}`;\n  }\n\n  /**\n   * 格式化组件输出 | Format component output\n   */\n  protected formatOutput(icon: string, text: string, colorName?: string): string {\n    const formattedText = `${icon} ${text}`;\n    return colorName ? this.colorize(formattedText, colorName) : formattedText;\n  }\n}\n\n/**\n * 组件工厂接口 | Component factory interface\n */\nexport interface ComponentFactory {\n  /** 创建组件实例 | Create component instance */\n  createComponent(name: string, config: ComponentConfig): Component;\n  /** 获取支持的组件类型 | Get supported component types */\n  getSupportedTypes(): string[];\n}\n\n/**\n * 组件注册表 | Component registry\n */\nexport class ComponentRegistry {\n  private factories = new Map<string, ComponentFactory>();\n\n  /**\n   * 注册组件工厂 | Register component factory\n   */\n  register(type: string, factory: ComponentFactory): void {\n    this.factories.set(type, factory);\n  }\n\n  /**\n   * 创建组件 | Create component\n   */\n  create(type: string, name: string, config: ComponentConfig): Component | null {\n    const factory = this.factories.get(type);\n    if (!factory) {\n      console.warn(`Unknown component type: ${type}`);\n      return null;\n    }\n    return factory.createComponent(name, config);\n  }\n\n  /**\n   * 获取所有注册的组件类型 | Get all registered component types\n   */\n  getRegisteredTypes(): string[] {\n    return Array.from(this.factories.keys());\n  }\n}\n","import { execSync } from 'node:child_process';\nimport type { BranchComponentConfig, ComponentConfig, RenderContext } from '../config/schema.js';\nimport { BaseComponent, type ComponentFactory } from './base.js';\n\n/**\n * 分支组件 | Branch component\n * 显示当前Git分支信息 | Display current Git branch information\n */\nexport class BranchComponent extends BaseComponent {\n  private branchConfig: BranchComponentConfig;\n\n  constructor(name: string, config: BranchComponentConfig) {\n    super(name, config);\n    this.branchConfig = config;\n  }\n\n  protected renderContent(context: RenderContext): string | null {\n    const { inputData, config } = context;\n\n    let branch = inputData.gitBranch;\n\n    // 如果没有提供分支信息，尝试通过Git命令获取 | If no branch info provided, try to get via Git command\n    if (!branch) {\n      try {\n        branch = execSync('git rev-parse --abbrev-ref HEAD 2>/dev/null', {\n          cwd: inputData.workspace?.current_dir || inputData.cwd,\n          encoding: 'utf8',\n          timeout: config.advanced?.git_timeout || 1000,\n        }).trim();\n      } catch (_error) {\n        branch = 'no-git';\n      }\n    }\n\n    // 检查是否在无Git时显示 | Check if should display when no Git\n    if (branch === 'no-git' && !this.branchConfig.show_when_no_git) {\n      return null;\n    }\n\n    // 截断过长的分支名 | Truncate long branch names\n    let displayBranch = branch;\n    const maxLength = this.branchConfig.max_length;\n    if (maxLength && displayBranch.length > maxLength) {\n      displayBranch = `${displayBranch.substring(0, maxLength - 3)}...`;\n    }\n\n    // 获取显示配置 | Get display configuration\n    const icon = this.getIcon('branch');\n    const colorName = this.branchConfig.color || 'green';\n\n    return this.formatOutput(icon, displayBranch, colorName);\n  }\n}\n\n/**\n * 分支组件工厂 | Branch component factory\n */\nexport class BranchComponentFactory implements ComponentFactory {\n  createComponent(name: string, config: ComponentConfig): BranchComponent {\n    return new BranchComponent(name, config as BranchComponentConfig);\n  }\n\n  getSupportedTypes(): string[] {\n    return ['branch'];\n  }\n}\n","import type { ComponentConfig, ModelComponentConfig, RenderContext } from '../config/schema.js';\nimport { BaseComponent, type ComponentFactory } from './base.js';\n\n/**\n * 默认模型配置 | Default model configurations\n */\nconst DEFAULT_MODEL_CONFIGS = {\n  'claude-sonnet-4': { contextWindow: 200000, shortName: 'S4' },\n  'claude-sonnet-3.7': { contextWindow: 200000, shortName: 'S3.7' },\n  'claude-opus-4.1': { contextWindow: 200000, shortName: 'O4.1' },\n  'claude-haiku-3.5': { contextWindow: 200000, shortName: 'H3.5' },\n} as const;\n\n/**\n * 模型信息接口 | Model info interface\n */\ninterface ModelInfo {\n  contextWindow: number;\n  shortName: string;\n}\n\n/**\n * 模型组件 | Model component\n * 显示当前使用的模型信息 | Display current model information\n */\nexport class ModelComponent extends BaseComponent {\n  private modelConfig: ModelComponentConfig;\n\n  constructor(name: string, config: ModelComponentConfig) {\n    super(name, config);\n    this.modelConfig = config;\n  }\n\n  protected renderContent(context: RenderContext): string | null {\n    const { inputData } = context;\n\n    // 获取模型信息 | Get model info\n    const modelId = inputData.model?.id || inputData.model?.display_name;\n    if (!modelId) return null;\n\n    const modelInfo = this.getModelInfo(modelId);\n\n    // 确定显示名称 | Determine display name\n    const displayName = this.modelConfig.show_full_name\n      ? inputData.model?.display_name || inputData.model?.id || '?'\n      : modelInfo.shortName;\n\n    // 获取显示配置 | Get display configuration\n    const icon = this.getIcon('model');\n    const colorName = this.modelConfig.color || 'blue';\n\n    return this.formatOutput(icon, displayName, colorName);\n  }\n\n  /**\n   * 获取模型配置信息 | Get model configuration info\n   */\n  private getModelInfo(modelId: string): ModelInfo {\n    if (!modelId) {\n      return { contextWindow: 200000, shortName: '?' };\n    }\n\n    // 检查自定义名称映射 | Check custom name mapping\n    const customNames = this.modelConfig.custom_names || {};\n\n    // 查找预定义配置 | Find predefined configuration\n    const modelKey = Object.keys(DEFAULT_MODEL_CONFIGS).find((key) =>\n      modelId.toLowerCase().includes(key.toLowerCase())\n    );\n\n    if (modelKey) {\n      const config = DEFAULT_MODEL_CONFIGS[modelKey as keyof typeof DEFAULT_MODEL_CONFIGS];\n      const customName = customNames[modelKey];\n      return {\n        contextWindow: config.contextWindow,\n        shortName: customName || config.shortName,\n      };\n    }\n\n    // 回退逻辑 - 解析模型名称 | Fallback logic - parse model name\n    let shortName = 'Unknown';\n    const lowerModelId = modelId.toLowerCase();\n\n    if (lowerModelId.includes('sonnet')) {\n      const match = modelId.match(/sonnet[\\s-]*(\\d+(?:\\.\\d+)?)/i);\n      shortName = match ? `S${match[1]}` : 'S?';\n    } else if (lowerModelId.includes('opus')) {\n      const match = modelId.match(/opus[\\s-]*(\\d+(?:\\.\\d+)?)/i);\n      shortName = match ? `O${match[1]}` : 'O?';\n    } else if (lowerModelId.includes('haiku')) {\n      const match = modelId.match(/haiku[\\s-]*(\\d+(?:\\.\\d+)?)/i);\n      shortName = match ? `H${match[1]}` : 'H?';\n    } else {\n      // 提取字母数字字符作为简称 | Extract alphanumeric characters as short name\n      shortName = modelId\n        .replace(/[^a-zA-Z0-9]/g, '')\n        .substring(0, 4)\n        .toUpperCase();\n    }\n\n    // 检查是否有自定义名称 | Check for custom names\n    for (const [key, customName] of Object.entries(customNames)) {\n      if (lowerModelId.includes(key.toLowerCase())) {\n        shortName = customName;\n        break;\n      }\n    }\n\n    return { contextWindow: 200000, shortName };\n  }\n}\n\n/**\n * 模型组件工厂 | Model component factory\n */\nexport class ModelComponentFactory implements ComponentFactory {\n  createComponent(name: string, config: ComponentConfig): ModelComponent {\n    return new ModelComponent(name, config as ModelComponentConfig);\n  }\n\n  getSupportedTypes(): string[] {\n    return ['model'];\n  }\n}\n","import path from 'node:path';\nimport type { ComponentConfig, ProjectComponentConfig, RenderContext } from '../config/schema.js';\nimport { BaseComponent, type ComponentFactory } from './base.js';\n\n/**\n * 项目组件 | Project component\n * 显示当前项目/目录名称 | Display current project/directory name\n */\nexport class ProjectComponent extends BaseComponent {\n  private projectConfig: ProjectComponentConfig;\n\n  constructor(name: string, config: ProjectComponentConfig) {\n    super(name, config);\n    this.projectConfig = config;\n  }\n\n  protected renderContent(context: RenderContext): string | null {\n    const { inputData } = context;\n\n    // 获取项目路径 | Get project path\n    const projectPath =\n      inputData.workspace?.project_dir || inputData.workspace?.current_dir || inputData.cwd;\n\n    if (!projectPath) return null;\n\n    // 提取项目名称 | Extract project name\n    const projectName = path.basename(projectPath);\n\n    // 检查是否显示空项目名 | Check if empty project name should be displayed\n    if (projectName === '.' || (projectName === '' && !this.projectConfig.show_when_empty)) {\n      return null;\n    }\n\n    // 获取显示配置 | Get display configuration\n    const icon = this.getIcon('project');\n    const colorName = this.projectConfig.color || 'cyan';\n\n    return this.formatOutput(icon, projectName, colorName);\n  }\n}\n\n/**\n * 项目组件工厂 | Project component factory\n */\nexport class ProjectComponentFactory implements ComponentFactory {\n  createComponent(name: string, config: ComponentConfig): ProjectComponent {\n    return new ProjectComponent(name, config as ProjectComponentConfig);\n  }\n\n  getSupportedTypes(): string[] {\n    return ['project'];\n  }\n}\n","import { existsSync, readFileSync, statSync } from 'node:fs';\nimport type {\n  ComponentConfig,\n  RenderContext,\n  StatusComponentConfig,\n  TranscriptEntry,\n} from '../config/schema.js';\nimport { BaseComponent, type ComponentFactory } from './base.js';\n\n/**\n * 状态信息类型 | Status info type\n */\ntype StatusType = 'ready' | 'thinking' | 'tool' | 'error' | 'warning';\n\n/**\n * 状态信息接口 | Status info interface\n */\ninterface StatusInfo {\n  type: StatusType;\n  message: string;\n  details?: string;\n}\n\n/**\n * Status组件 | Status component\n * 显示当前Claude会话状态 | Display current Claude session status\n */\nexport class StatusComponent extends BaseComponent {\n  private statusConfig: StatusComponentConfig;\n  private cachedStatus: StatusInfo | null = null;\n  private lastTranscriptMtime: number | null = null;\n\n  constructor(name: string, config: StatusComponentConfig) {\n    super(name, config);\n    this.statusConfig = config;\n  }\n\n  protected renderContent(context: RenderContext): string | null {\n    const { inputData } = context;\n\n    // 检查是否有Mock数据 | Check for mock data\n    const mockData = (inputData as Record<string, unknown>).__mock__;\n    if (mockData && typeof mockData === 'object' && 'status' in mockData) {\n      return this.renderMockStatus((mockData as Record<string, unknown>).status as string);\n    }\n\n    if (!inputData.transcriptPath) {\n      return this.renderDefaultStatus();\n    }\n\n    const statusInfo = this.parseTranscriptStatus(inputData.transcriptPath, context);\n    if (!statusInfo) {\n      return this.renderDefaultStatus();\n    }\n\n    return this.formatStatusDisplay(statusInfo);\n  }\n\n  /**\n   * 渲染Mock状态 | Render mock status\n   */\n  private renderMockStatus(status: string): string {\n    const statusMap: { [key: string]: { type: StatusType; message: string } } = {\n      ready: { type: 'ready', message: 'Ready' },\n      thinking: { type: 'thinking', message: 'Thinking...' },\n      tool_use: { type: 'tool', message: 'Tool Use' },\n      error: { type: 'error', message: 'Error' },\n      complete: { type: 'ready', message: 'Complete' },\n    };\n\n    const statusInfo = statusMap[status] || { type: 'ready', message: 'Ready' };\n    return this.formatStatusDisplay(statusInfo);\n  }\n\n  /**\n   * 渲染默认状态 | Render default status\n   */\n  private renderDefaultStatus(): string {\n    const icon = this.getIcon('ready');\n    const colorName = this.statusConfig.colors?.ready || 'green';\n    return this.formatOutput(icon, 'Ready', colorName);\n  }\n\n  /**\n   * 解析transcript状态 | Parse transcript status\n   */\n  private parseTranscriptStatus(transcriptPath: string, context: RenderContext): StatusInfo | null {\n    // 检查文件存在性 | Check file existence\n    let fileExists = false;\n    try {\n      fileExists = existsSync(transcriptPath) && statSync(transcriptPath).isFile();\n    } catch (_error) {\n      return null;\n    }\n\n    if (!fileExists) {\n      return { type: 'ready', message: 'Ready' };\n    }\n\n    try {\n      const stat = statSync(transcriptPath);\n      const currentMtime = stat.mtime.getTime();\n\n      // 检查缓存 | Check cache\n      const cacheEnabled = context.config.advanced?.cache_enabled ?? true;\n      if (cacheEnabled && this.cachedStatus && this.lastTranscriptMtime === currentMtime) {\n        return this.cachedStatus;\n      }\n\n      const transcript = readFileSync(transcriptPath, 'utf8');\n      const lines = transcript.trim().split('\\n');\n\n      let lastStopReason: string | null = null;\n      let lastToolCall: string | null = null;\n      let lastEntryType: string | null = null;\n      let assistantError = false;\n      let errorDetails = 'Error';\n      let _lastAssistantIndex = -1;\n\n      // 查找最新的assistant消息 | Find latest assistant message\n      for (let i = lines.length - 1; i >= 0; i--) {\n        const line = lines[i]?.trim();\n        if (!line) continue;\n\n        try {\n          const entry = JSON.parse(line) as TranscriptEntry;\n\n          if (!lastEntryType) {\n            lastEntryType = entry.type;\n          }\n\n          // 查找assistant消息的usage和stop_reason | Find assistant message usage and stop_reason\n          if (entry.type === 'assistant' && entry.message && 'usage' in entry.message) {\n            lastStopReason = entry.message?.stop_reason || null;\n            _lastAssistantIndex = i;\n\n            // 检查是否有错误 | Check for errors\n            assistantError = this.isErrorEntry(entry);\n            if (assistantError) {\n              errorDetails = this.getErrorDetails(entry);\n            }\n            break;\n          }\n        } catch (_parseError) {}\n      }\n\n      // 查找最近的工具调用 | Find recent tool calls\n      const recentErrorCount = context.config.advanced?.recent_error_count || 5;\n      const recentLines = lines.slice(-recentErrorCount);\n\n      for (const line of recentLines) {\n        if (!line.trim()) continue;\n\n        try {\n          const entry = JSON.parse(line) as TranscriptEntry;\n\n          if (\n            'message' in entry &&\n            entry.message?.content &&\n            Array.isArray(entry.message.content)\n          ) {\n            const toolUse = entry.message.content.find(\n              (item: unknown) =>\n                typeof item === 'object' &&\n                item !== null &&\n                'type' in item &&\n                (item as Record<string, unknown>).type === 'tool_use'\n            );\n            if (toolUse && typeof toolUse === 'object' && 'name' in toolUse) {\n              lastToolCall = toolUse.name as string;\n            }\n          }\n        } catch (_parseError) {\n          // 忽略单行解析错误 | Ignore single line parse errors\n        }\n      }\n\n      // 确定状态 | Determine status\n      let statusInfo: StatusInfo;\n\n      if (assistantError) {\n        statusInfo = { type: 'error', message: errorDetails, details: errorDetails };\n      } else if (lastStopReason === 'tool_use') {\n        const toolInfo = lastToolCall ? ` ${lastToolCall}` : '';\n        statusInfo = {\n          type: 'tool',\n          message: `Tool${toolInfo}`,\n          details: lastToolCall || '',\n        };\n      } else if (lastStopReason === 'end_turn') {\n        statusInfo = { type: 'ready', message: 'Ready' };\n      } else if (lastStopReason === null) {\n        // 当stop_reason为null时，智能判断 | Smart inference when stop_reason is null\n        if (lastEntryType === 'user') {\n          statusInfo = { type: 'thinking', message: 'Thinking' };\n        } else {\n          statusInfo = { type: 'ready', message: 'Ready' };\n        }\n      } else {\n        // 其他未知状态 | Other unknown states\n        statusInfo = { type: 'ready', message: 'Ready' };\n      }\n\n      // 缓存结果 | Cache result\n      if (cacheEnabled) {\n        this.cachedStatus = statusInfo;\n        this.lastTranscriptMtime = currentMtime;\n      }\n\n      return statusInfo;\n    } catch (error) {\n      console.error('Error parsing transcript status:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 检测条目是否包含真正的错误 | Detect if entry contains real errors\n   */\n  private isErrorEntry(entry: Record<string, unknown>): boolean {\n    // 检查工具使用结果中的错误，但排除权限相关的阻止 | Check for errors in tool use results, excluding permission-related blocks\n    if ((entry as Record<string, unknown>).toolUseResult) {\n      const toolUseResult = (entry as Record<string, unknown>).toolUseResult as Record<\n        string,\n        unknown\n      >;\n      const errorMsg = toolUseResult.error || toolUseResult;\n      if (\n        typeof errorMsg === 'string' &&\n        (errorMsg.includes('was blocked') || errorMsg.includes('For security'))\n      ) {\n        return false;\n      }\n      if (toolUseResult.error || toolUseResult.type === 'error') {\n        return true;\n      }\n    }\n\n    // 检查stop_reason为stop_sequence的API错误 | Check for API errors with stop_reason as stop_sequence\n    const message = (entry as Record<string, unknown>).message as\n      | Record<string, unknown>\n      | undefined;\n    if (message?.stop_reason === 'stop_sequence') {\n      if (message?.content && Array.isArray(message.content)) {\n        for (const item of message.content as Array<Record<string, unknown>>) {\n          if (item.type === 'text' && item.text) {\n            const text = item.text as string;\n            // API Error 403 配额不足 | API Error 403 insufficient quota\n            if (text.startsWith('API Error: 403') && text.includes('user quota is not enough')) {\n              return true;\n            }\n            // filter错误 | filter error\n            if (text.includes('filter')) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * 获取错误详细信息 | Get error details\n   */\n  private getErrorDetails(entry: Record<string, unknown>): string {\n    // 检查stop_reason为stop_sequence的API错误 | Check for API errors with stop_reason as stop_sequence\n    const message = (entry as Record<string, unknown>).message as\n      | Record<string, unknown>\n      | undefined;\n    if (message?.stop_reason === 'stop_sequence') {\n      if (message?.content && Array.isArray(message.content)) {\n        for (const item of message.content as Array<Record<string, unknown>>) {\n          if (item.type === 'text' && item.text) {\n            const text = item.text as string;\n            // API Error 403 配额不足 | API Error 403 insufficient quota\n            if (text.startsWith('API Error: 403') && text.includes('user quota is not enough')) {\n              return '403配额不足';\n            }\n            // filter错误 | filter error\n            if (text.includes('filter')) {\n              return 'Filter错误';\n            }\n          }\n        }\n      }\n    }\n    return 'Error';\n  }\n\n  /**\n   * 格式化状态显示 | Format status display\n   */\n  private formatStatusDisplay(statusInfo: StatusInfo): string {\n    const { type, message } = statusInfo;\n\n    // 获取图标和颜色 | Get icon and color\n    const icon = this.getIcon(type);\n    const colorName = this.statusConfig.colors?.[type] || this.getDefaultColor(type);\n\n    return this.formatOutput(icon, message, colorName);\n  }\n\n  /**\n   * 获取默认颜色 | Get default color\n   */\n  private getDefaultColor(type: StatusType): string {\n    const colorMap: Record<StatusType, string> = {\n      ready: 'green',\n      thinking: 'yellow',\n      tool: 'blue',\n      error: 'red',\n      warning: 'yellow',\n    };\n    return colorMap[type] || 'white';\n  }\n}\n\n/**\n * Status组件工厂 | Status component factory\n */\nexport class StatusComponentFactory implements ComponentFactory {\n  createComponent(name: string, config: ComponentConfig): StatusComponent {\n    return new StatusComponent(name, config as StatusComponentConfig);\n  }\n\n  getSupportedTypes(): string[] {\n    return ['status'];\n  }\n}\n","import { existsSync, readFileSync, statSync } from 'node:fs';\nimport type {\n  ComponentConfig,\n  RenderContext,\n  TokensComponentConfig,\n  TranscriptEntry,\n} from '../config/schema.js';\nimport { BaseComponent, type ComponentFactory } from './base.js';\n\n/**\n * Token使用信息接口 | Token usage info interface\n */\ninterface TokenUsageInfo {\n  contextUsedTokens: number;\n  contextWindow: number;\n  usagePercentage: number;\n  progressBar?: string;\n  warning?: boolean;\n  critical?: boolean;\n}\n\n/**\n * Tokens组件 | Tokens component\n * 显示当前上下文Token使用情况 | Display current context token usage\n */\nexport class TokensComponent extends BaseComponent {\n  private tokensConfig: TokensComponentConfig;\n  private cachedTranscriptData: TokenUsageInfo | null = null;\n  private lastTranscriptMtime: number | null = null;\n\n  constructor(name: string, config: TokensComponentConfig) {\n    super(name, config);\n    this.tokensConfig = config;\n  }\n\n  protected renderContent(context: RenderContext): string | null {\n    const { inputData } = context;\n\n    // 检查是否有Mock数据 | Check for mock data\n    const mockData = (inputData as Record<string, unknown>).__mock__;\n    if (mockData && typeof (mockData as Record<string, unknown>).tokenUsage === 'number') {\n      return this.renderMockTokenData(\n        (mockData as Record<string, unknown>).tokenUsage as number,\n        (mockData as Record<string, unknown>).status as string\n      );\n    }\n\n    if (!inputData.transcriptPath) {\n      return this.renderNoTranscript();\n    }\n\n    const tokenUsage = this.parseTranscriptFile(inputData.transcriptPath, context);\n    if (!tokenUsage) {\n      return this.renderNoTranscript();\n    }\n\n    return this.formatTokenDisplay(tokenUsage);\n  }\n\n  /**\n   * 渲染Mock数据 | Render mock token data\n   */\n  private renderMockTokenData(tokenUsagePercent: number, _status?: string): string | null {\n    const contextWindow = this.getContextWindow();\n    const contextUsedTokens = Math.floor((tokenUsagePercent / 100) * contextWindow);\n\n    const tokenUsage: TokenUsageInfo = {\n      contextUsedTokens,\n      contextWindow,\n      usagePercentage: tokenUsagePercent,\n      warning: tokenUsagePercent > (this.tokensConfig.thresholds?.warning || 60),\n      critical: tokenUsagePercent > (this.tokensConfig.thresholds?.critical || 95),\n    };\n\n    // 生成进度条 | Generate progress bar\n    if (this.tokensConfig.show_progress_bar) {\n      tokenUsage.progressBar = this.generateProgressBar(tokenUsagePercent);\n    }\n\n    return this.formatTokenDisplay(tokenUsage);\n  }\n\n  /**\n   * 渲染无transcript文件时的显示 | Render display when no transcript file\n   */\n  private renderNoTranscript(): string | null {\n    const contextWindow = this.getContextWindow();\n    const tokenUsage: TokenUsageInfo = {\n      contextUsedTokens: 0,\n      contextWindow,\n      usagePercentage: 0,\n      warning: false,\n      critical: false,\n    };\n\n    // 生成空进度条 | Generate empty progress bar\n    if (this.tokensConfig.show_progress_bar) {\n      tokenUsage.progressBar = this.generateProgressBar(0);\n    }\n\n    return this.formatTokenDisplay(tokenUsage);\n  }\n\n  /**\n   * 解析transcript文件 | Parse transcript file\n   */\n  private parseTranscriptFile(\n    transcriptPath: string,\n    context: RenderContext\n  ): TokenUsageInfo | null {\n    // 检查文件存在性 | Check file existence\n    let fileExists = false;\n    try {\n      fileExists = existsSync(transcriptPath) && statSync(transcriptPath).isFile();\n    } catch (_error) {\n      return null;\n    }\n\n    if (!fileExists) {\n      return {\n        contextUsedTokens: 0,\n        contextWindow: this.getContextWindow(),\n        usagePercentage: 0,\n      };\n    }\n\n    try {\n      const stat = statSync(transcriptPath);\n      const currentMtime = stat.mtime.getTime();\n\n      // 检查缓存 | Check cache\n      const cacheEnabled = context.config.advanced?.cache_enabled ?? true;\n      if (cacheEnabled && this.cachedTranscriptData && this.lastTranscriptMtime === currentMtime) {\n        return this.cachedTranscriptData;\n      }\n\n      const transcript = readFileSync(transcriptPath, 'utf8');\n      const lines = transcript.trim().split('\\n');\n\n      let contextUsedTokens = 0;\n\n      // 从最后开始查找最新的assistant消息 | Find latest assistant message from the end\n      for (let i = lines.length - 1; i >= 0; i--) {\n        const line = lines[i]?.trim();\n        if (!line) continue;\n\n        try {\n          const entry = JSON.parse(line) as TranscriptEntry;\n\n          // 查找包含usage信息的assistant消息 | Find assistant message with usage info\n          if (entry.type === 'assistant' && entry.message && 'usage' in entry.message) {\n            const usage = entry.message.usage;\n            const requiredKeys = [\n              'input_tokens',\n              'cache_creation_input_tokens',\n              'cache_read_input_tokens',\n              'output_tokens',\n            ];\n\n            if (usage && requiredKeys.every((key) => key in usage)) {\n              contextUsedTokens =\n                usage.input_tokens +\n                usage.cache_creation_input_tokens +\n                usage.cache_read_input_tokens +\n                usage.output_tokens;\n              break;\n            }\n          }\n        } catch (_parseError) {}\n      }\n\n      const contextWindow = this.getContextWindow();\n      const usagePercentage = (contextUsedTokens / contextWindow) * 100;\n\n      const result: TokenUsageInfo = {\n        contextUsedTokens,\n        contextWindow,\n        usagePercentage,\n        warning: usagePercentage > (this.tokensConfig.thresholds?.warning || 60),\n        critical: usagePercentage > (this.tokensConfig.thresholds?.critical || 95),\n      };\n\n      // 生成进度条 | Generate progress bar\n      if (this.tokensConfig.show_progress_bar) {\n        result.progressBar = this.generateProgressBar(usagePercentage);\n      }\n\n      // 缓存结果 | Cache result\n      if (cacheEnabled) {\n        this.cachedTranscriptData = result;\n        this.lastTranscriptMtime = currentMtime;\n      }\n\n      return result;\n    } catch (error) {\n      console.error('Error parsing transcript file:', error);\n      return null;\n    }\n  }\n\n  /**\n   * 获取上下文窗口大小 | Get context window size\n   */\n  private getContextWindow(): number {\n    return this.tokensConfig.context_window || 200000;\n  }\n\n  /**\n   * 生成进度条 | Generate progress bar\n   */\n  private generateProgressBar(usagePercentage: number): string {\n    const width = this.tokensConfig.progress_bar_width || 10;\n    const filled = Math.round((usagePercentage / 100) * width);\n    const _empty = width - filled;\n\n    // 使用配置的进度条字符 | Use configured progress bar characters\n    const filledChar = this.tokensConfig.progress_bar_chars?.filled || '█';\n    const emptyChar = this.tokensConfig.progress_bar_chars?.empty || '░';\n    const backupChar = this.tokensConfig.progress_bar_chars?.backup || '▓';\n\n    // 85%后使用后备区域字符 | Use backup area character after 85%\n    let bar = '';\n    for (let i = 0; i < width; i++) {\n      const segmentPercentage = (i / width) * 100;\n      if (i < filled) {\n        bar += segmentPercentage >= 85 ? backupChar : filledChar;\n      } else {\n        bar += emptyChar;\n      }\n    }\n\n    return bar;\n  }\n\n  /**\n   * 格式化Token显示 | Format token display\n   */\n  private formatTokenDisplay(tokenUsage: TokenUsageInfo): string {\n    const { contextUsedTokens, contextWindow, usagePercentage, progressBar, warning, critical } =\n      tokenUsage;\n\n    const icon = this.getIcon('token');\n\n    // 确定颜色 | Determine color\n    let colorName = this.tokensConfig.color || 'yellow';\n    if (critical) {\n      colorName = 'red';\n    } else if (warning) {\n      colorName = 'yellow';\n    }\n\n    // 按原版格式：[进度条] 百分比 (具体数值) | Format like original: [progressbar] percentage (specific numbers)\n    let displayText = '';\n\n    // 1. 添加进度条 (带方括号) | Add progress bar (with brackets)\n    if (progressBar) {\n      displayText += `[${progressBar}] `;\n    }\n\n    // 2. 添加百分比 | Add percentage\n    if (this.tokensConfig.show_percentage) {\n      displayText += `${usagePercentage.toFixed(1)}% `;\n    }\n\n    // 3. 添加具体数值 (更精确的k显示) | Add specific numbers (more precise k display)\n    const usedDisplay = this.tokensConfig.show_raw_numbers\n      ? contextUsedTokens.toString()\n      : `${(contextUsedTokens / 1000).toFixed(1)}k`;\n\n    const totalDisplay = this.tokensConfig.show_raw_numbers\n      ? contextWindow.toString()\n      : `${(contextWindow / 1000).toFixed(0)}k`;\n\n    displayText += `(${usedDisplay}/${totalDisplay})`;\n\n    // 添加状态指示器 | Add status indicators\n    if (critical) {\n      displayText += ' 🔥';\n    } else if (warning) {\n      displayText += ' ⚡';\n    }\n\n    return this.formatOutput(icon, displayText, colorName);\n  }\n}\n\n/**\n * Tokens组件工厂 | Tokens component factory\n */\nexport class TokensComponentFactory implements ComponentFactory {\n  createComponent(name: string, config: ComponentConfig): TokensComponent {\n    return new TokensComponent(name, config as TokensComponentConfig);\n  }\n\n  getSupportedTypes(): string[] {\n    return ['tokens'];\n  }\n}\n","import type { Config } from '../config/schema.js';\nimport type { TerminalCapabilities } from './detector.js';\n\n/**\n * 颜色映射接口 | Color mapping interface\n */\nexport interface ColorMap {\n  [colorName: string]: string;\n}\n\n/**\n * 图标映射接口 | Icon mapping interface\n */\nexport interface IconMap {\n  [iconName: string]: string;\n}\n\n/**\n * 终端颜色和图标管理器 | Terminal color and icon manager\n */\nexport class TerminalRenderer {\n  private colors: ColorMap;\n  private icons: IconMap;\n  private capabilities: TerminalCapabilities;\n\n  constructor(capabilities: TerminalCapabilities, config: Config) {\n    this.capabilities = capabilities;\n    this.colors = this.setupColors(config);\n    this.icons = this.setupIcons(config);\n  }\n\n  /**\n   * 获取颜色代码 | Get color code\n   */\n  public getColor(colorName: string): string {\n    return this.colors[colorName] || '';\n  }\n\n  /**\n   * 获取图标 | Get icon\n   */\n  public getIcon(iconName: string): string {\n    return this.icons[iconName] || '';\n  }\n\n  /**\n   * 获取重置颜色代码 | Get reset color code\n   */\n  public getReset(): string {\n    return this.colors.reset || '';\n  }\n\n  /**\n   * 应用颜色 | Apply color\n   */\n  public colorize(text: string, colorName: string): string {\n    if (!text || !this.capabilities.colors) return text;\n    const color = this.getColor(colorName);\n    const reset = this.getReset();\n    return `${color}${text}${reset}`;\n  }\n\n  /**\n   * 设置颜色系统 | Setup color system\n   */\n  private setupColors(config: Config): ColorMap {\n    // 基础ANSI颜色映射 | Basic ANSI color mapping\n    const baseColors: ColorMap = {\n      reset: '\\x1b[0m',\n      bright: '\\x1b[1m',\n      dim: '\\x1b[2m',\n      black: '\\x1b[30m',\n      red: '\\x1b[31m',\n      green: '\\x1b[32m',\n      yellow: '\\x1b[33m',\n      blue: '\\x1b[34m',\n      magenta: '\\x1b[35m',\n      cyan: '\\x1b[36m',\n      white: '\\x1b[37m',\n      gray: '\\x1b[90m',\n      bright_red: '\\x1b[91m',\n      bright_green: '\\x1b[92m',\n      bright_yellow: '\\x1b[93m',\n      bright_blue: '\\x1b[94m',\n      bright_magenta: '\\x1b[95m',\n      bright_cyan: '\\x1b[96m',\n      bright_white: '\\x1b[97m',\n    };\n\n    // 合并自定义颜色代码 | Merge custom color codes\n    const customColors = config.advanced?.custom_color_codes || {};\n\n    // 如果不支持颜色，返回空字符串映射 | If colors not supported, return empty string mapping\n    if (!this.capabilities.colors) {\n      const emptyColors: ColorMap = {};\n      for (const key of Object.keys({ ...baseColors, ...customColors })) {\n        emptyColors[key] = '';\n      }\n      return emptyColors;\n    }\n\n    return { ...baseColors, ...customColors };\n  }\n\n  /**\n   * 设置图标系统 | Setup icon system\n   */\n  private setupIcons(config: Config): IconMap {\n    const components = config.components;\n\n    // 第一层：Nerd Font图标 (Font Awesome系列) | First tier: Nerd Font icons (Font Awesome series)\n    const nerdFontIcons: IconMap = {\n      project: components?.project?.nerd_icon || '\\uf07b', // fa-folder\n      model: components?.model?.nerd_icon || '\\uf085', // fa-cogs (机器/模型)\n      branch: components?.branch?.nerd_icon || '\\uf126', // fa-code-branch (git分支)\n      token: components?.tokens?.nerd_icon || '\\uf080', // fa-bar-chart\n      ready: components?.status?.nerd_icons?.ready || '\\uf00c', // fa-check\n      thinking: components?.status?.nerd_icons?.thinking || '\\uf110', // fa-spinner\n      tool: components?.status?.nerd_icons?.tool || '\\uf0ad', // fa-wrench\n      error: components?.status?.nerd_icons?.error || '\\uf00d', // fa-times\n      warning: components?.status?.nerd_icons?.warning || '\\uf071', // fa-exclamation-triangle\n    };\n\n    // 第二层：Emoji图标 | Second tier: Emoji icons\n    const emojiIcons: IconMap = {\n      project: components?.project?.icon || '📁',\n      model: components?.model?.icon || '🤖',\n      branch: components?.branch?.icon || '🌿',\n      token: components?.tokens?.icon || '📊',\n      ready: components?.status?.icons?.ready || '✅',\n      thinking: components?.status?.icons?.thinking || '💭',\n      tool: components?.status?.icons?.tool || '🔧',\n      error: components?.status?.icons?.error || '❌',\n      warning: components?.status?.icons?.warning || '⚠️',\n    };\n\n    // 第三层：文本图标 | Third tier: Text icons\n    const textIcons: IconMap = {\n      project: components?.project?.text_icon || '[P]',\n      model: components?.model?.text_icon || '[M]',\n      branch: components?.branch?.text_icon || '[B]',\n      token: components?.tokens?.text_icon || '[T]',\n      ready: components?.status?.text_icons?.ready || '[OK]',\n      thinking: components?.status?.text_icons?.thinking || '[...]',\n      tool: components?.status?.text_icons?.tool || '[TOOL]',\n      error: components?.status?.text_icons?.error || '[ERR]',\n      warning: components?.status?.text_icons?.warning || '[WARN]',\n    };\n\n    // 根据能力选择图标集 | Select icon set based on capabilities\n    if (this.capabilities.nerdFont) {\n      return nerdFontIcons;\n    } else if (this.capabilities.emoji) {\n      return emojiIcons;\n    } else {\n      return textIcons;\n    }\n  }\n\n  /**\n   * 获取所有颜色 | Get all colors\n   */\n  public getColors(): ColorMap {\n    return { ...this.colors };\n  }\n\n  /**\n   * 获取所有图标 | Get all icons\n   */\n  public getIcons(): IconMap {\n    return { ...this.icons };\n  }\n\n  /**\n   * 获取终端能力 | Get terminal capabilities\n   */\n  public getCapabilities(): TerminalCapabilities {\n    return { ...this.capabilities };\n  }\n\n  /**\n   * 创建格式化字符串 | Create formatted string\n   */\n  public format(icon: string, text: string, colorName?: string): string {\n    const iconStr = this.getIcon(icon);\n    const content = iconStr ? `${iconStr} ${text}` : text;\n    return colorName ? this.colorize(content, colorName) : content;\n  }\n}\n\n// 向后兼容的别名\nexport const ColorSystem = TerminalRenderer;\nexport const IconSystem = TerminalRenderer;\n","/**\n * 终端能力检测器 | Terminal capability detector\n * 检测终端对颜色、表情符号、Nerd Font的支持 | Detect terminal support for colors, emojis, Nerd Font\n */\n\n/**\n * 终端能力接口 | Terminal capabilities interface\n */\nexport interface TerminalCapabilities {\n  colors: boolean;\n  emoji: boolean;\n  nerdFont: boolean;\n}\n\n/**\n * 自动检测选项 | Auto-detection option\n */\nexport type AutoDetectOption = boolean | 'auto';\n\n/**\n * 检测颜色支持 | Detect color support\n */\nfunction detectColors(enableColors: AutoDetectOption): boolean {\n  if (typeof enableColors === 'boolean') {\n    return enableColors;\n  }\n\n  // 自动检测颜色支持 | Auto-detect color support\n  return !!(\n    process.env.COLORTERM === 'truecolor' ||\n    process.env.TERM?.includes('256') ||\n    process.env.TERM_PROGRAM === 'vscode' ||\n    process.env.TERM_PROGRAM === 'iTerm.app' ||\n    process.env.TERM_PROGRAM === 'Hyper' ||\n    process.env.WT_SESSION || // Windows Terminal\n    process.env.ConEmuPID\n  );\n}\n\n/**\n * 检测表情符号支持 | Detect emoji support\n */\nfunction detectEmoji(enableEmoji: AutoDetectOption): boolean {\n  if (typeof enableEmoji === 'boolean') {\n    return enableEmoji;\n  }\n\n  // 自动检测表情符号支持 | Auto-detect emoji support\n  // Windows平台通常需要特殊处理 | Windows platform usually needs special handling\n  return !!(\n    process.platform !== 'win32' ||\n    process.env.WT_SESSION ||\n    process.env.TERM_PROGRAM === 'vscode' ||\n    process.env.ConEmuPID ||\n    process.env.TERM_PROGRAM === 'Hyper'\n  );\n}\n\n/**\n * 检查是否为已知支持Nerd Font的终端 | Check if it's a known Nerd Font compatible terminal\n */\nfunction isNerdFontCompatibleTerminal(): boolean {\n  const termProgram = process.env.TERM_PROGRAM;\n  const term = process.env.TERM;\n\n  // 已知支持Nerd Font的终端程序 | Terminal programs known to support Nerd Font\n  const supportedTerminals = ['iTerm.app', 'WezTerm', 'Alacritty', 'kitty', 'Hyper'];\n\n  if (termProgram && supportedTerminals.includes(termProgram)) {\n    return true;\n  }\n\n  // 检查terminal类型 | Check terminal type\n  if (term === 'xterm-kitty' || term === 'alacritty') {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * 检查是否为Nerd Font名称 | Check if it's a Nerd Font name\n */\nfunction isNerdFontName(fontName: string): boolean {\n  const nerdFontIndicators = [\n    'nerd',\n    'nf-',\n    'powerline',\n    'fira code',\n    'jetbrains mono',\n    'hack',\n    'source code pro',\n    'ubuntu mono',\n    'cascadia code',\n    'dejavu sans mono',\n  ];\n\n  const lowerFontName = fontName.toLowerCase();\n  return nerdFontIndicators.some((indicator) => lowerFontName.includes(indicator));\n}\n\n/**\n * 通过字体名称检测Nerd Font | Detect Nerd Font by font name\n */\nfunction detectNerdFontByName(): boolean {\n  // 检查常见的Nerd Font环境变量 | Check common Nerd Font environment variables\n  const fontVars = [process.env.FONT, process.env.TERMINAL_FONT, process.env.NERD_FONT_NAME];\n\n  for (const fontVar of fontVars) {\n    if (fontVar && isNerdFontName(fontVar)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * 保守的Nerd Font检测 | Conservative Nerd Font detection\n */\nfunction conservativeNerdFontDetection(): boolean {\n  // 对于VS Code，检查更多细节 | For VS Code, check more details\n  if (process.env.TERM_PROGRAM === 'vscode') {\n    // VS Code终端通常支持Nerd Font，但需要用户配置 | VS Code terminal usually supports Nerd Font, but requires user configuration\n    // 保守起见，除非明确配置，否则返回false | Conservatively, return false unless explicitly configured\n    return false;\n  }\n\n  // Windows Terminal 通常支持 | Windows Terminal usually supports\n  if (process.env.WT_SESSION) {\n    return true;\n  }\n\n  // 对于其他情况，保守返回false避免显示乱码 | For other cases, conservatively return false to avoid garbled characters\n  return false;\n}\n\n/**\n * 检测Nerd Font支持 | Detect Nerd Font support\n */\nfunction detectNerdFont(enableNerdFont: AutoDetectOption, forceNerdFont: boolean): boolean {\n  if (forceNerdFont) {\n    return true;\n  }\n\n  if (typeof enableNerdFont === 'boolean') {\n    return enableNerdFont;\n  }\n\n  // 1. 优先检查环境变量 - 最可靠的方法 | Priority: check environment variables - most reliable\n  if (process.env.NERD_FONT === '1' || process.env.NERD_FONT === 'true') {\n    return true;\n  }\n\n  // 2. 检查已知支持Nerd Font的终端 | Check terminals known to support Nerd Font\n  if (isNerdFontCompatibleTerminal()) {\n    return true;\n  }\n\n  // 3. 字体名称检测 | Font name detection\n  if (detectNerdFontByName()) {\n    return true;\n  }\n\n  // 4. 基于终端特征的保守检测 | Conservative detection based on terminal features\n  return conservativeNerdFontDetection();\n}\n\n/**\n * 检测终端能力 | Detect terminal capabilities\n */\nexport function detect(\n  enableColors: AutoDetectOption = 'auto',\n  enableEmoji: AutoDetectOption = 'auto',\n  enableNerdFont: AutoDetectOption = 'auto',\n  forceNerdFont: boolean = false\n): TerminalCapabilities {\n  return {\n    colors: detectColors(enableColors),\n    emoji: detectEmoji(enableEmoji),\n    nerdFont: detectNerdFont(enableNerdFont, forceNerdFont),\n  };\n}\n\n/**\n * 获取能力详细信息用于调试 | Get capability details for debugging\n */\nexport function getCapabilityInfo(): Record<string, unknown> {\n  return {\n    platform: process.platform,\n    env: {\n      COLORTERM: process.env.COLORTERM,\n      TERM: process.env.TERM,\n      TERM_PROGRAM: process.env.TERM_PROGRAM,\n      TERM_PROGRAM_VERSION: process.env.TERM_PROGRAM_VERSION,\n      WT_SESSION: process.env.WT_SESSION,\n      ConEmuPID: process.env.ConEmuPID,\n      NERD_FONT: process.env.NERD_FONT,\n      FONT: process.env.FONT,\n    },\n    detected: detect(),\n  };\n}\n\n/**\n * @deprecated Legacy class - use individual functions instead\n * 向后兼容性的遗留类 - 请使用独立函数\n */\n// Note: This class has been removed to improve code quality.\n// Use the exported functions directly instead.\n\n/**\n * 别名和便捷包装类: 为向后兼容和简化使用\n */\nexport class TerminalDetector {\n  detectCapabilities(): TerminalCapabilities {\n    return detect();\n  }\n\n  getCapabilityInfo(): Record<string, unknown> {\n    return getCapabilityInfo();\n  }\n}\n","import { ComponentRegistry } from '../components/base.js';\nimport { BranchComponentFactory } from '../components/branch.js';\nimport { ModelComponentFactory } from '../components/model.js';\nimport { ProjectComponentFactory } from '../components/project.js';\nimport { StatusComponentFactory } from '../components/status.js';\nimport { TokensComponentFactory } from '../components/tokens.js';\nimport type { ComponentConfig, Config, InputData, RenderContext } from '../config/schema.js';\nimport { TerminalRenderer } from '../terminal/colors.js';\nimport { detect, getCapabilityInfo } from '../terminal/detector.js';\n\n/**\n * 生成器选项 | Generator options\n */\nexport interface GeneratorOptions {\n  preset?: string;\n  updateThrottling?: boolean;\n  disableCache?: boolean;\n}\n\n/**\n * 核心状态行生成器 | Core statusline generator\n * 整合所有组件，生成最终的状态行 | Integrates all components to generate the final statusline\n */\nexport class StatuslineGenerator {\n  private config: Config;\n  private componentRegistry: ComponentRegistry;\n  private renderer?: TerminalRenderer;\n  private lastUpdate: number = 0;\n  private lastResult: string | null = null;\n  private updateInterval: number = 300; // 官方建议的300ms更新间隔 | Official 300ms update interval\n  private disableCache: boolean = false;\n\n  constructor(config: Config, options: GeneratorOptions = {}) {\n    this.config = config;\n    this.componentRegistry = new ComponentRegistry();\n    this.initializeComponents();\n\n    if (options.updateThrottling !== false) {\n      this.updateInterval = 300;\n    }\n\n    this.disableCache = options.disableCache || false;\n  }\n\n  /**\n   * 初始化组件注册表 | Initialize component registry\n   */\n  private initializeComponents(): void {\n    // 注册所有组件工厂 | Register all component factories\n    this.componentRegistry.register('project', new ProjectComponentFactory());\n    this.componentRegistry.register('model', new ModelComponentFactory());\n    this.componentRegistry.register('branch', new BranchComponentFactory());\n    this.componentRegistry.register('tokens', new TokensComponentFactory());\n    this.componentRegistry.register('status', new StatusComponentFactory());\n  }\n\n  /**\n   * 生成状态行 | Generate statusline\n   */\n  public async generate(inputData: InputData): Promise<string> {\n    try {\n      // 检查更新频率限制 | Check update rate limit\n      if (!this.shouldUpdate()) {\n        return this.lastResult || '';\n      }\n\n      // 检测终端能力 | Detect terminal capabilities\n      const capabilities = detect(\n        this.config.style?.enable_colors,\n        this.config.style?.enable_emoji,\n        this.config.style?.enable_nerd_font,\n        this.config.experimental?.force_nerd_font\n      );\n\n      // 初始化终端渲染器 | Initialize terminal renderer\n      this.renderer = new TerminalRenderer(capabilities, this.config);\n\n      // 创建渲染上下文 | Create render context\n      const context: RenderContext = {\n        inputData,\n        config: this.config,\n        capabilities,\n        colors: this.renderer.getColors(),\n        icons: this.renderer.getIcons(),\n      };\n\n      // 获取组件顺序 | Get component order\n      const componentOrder = this.getComponentOrder();\n\n      // 生成各组件内容 | Generate component content\n      const componentResults: string[] = [];\n\n      for (const componentName of componentOrder) {\n        const componentConfig = this.getComponentConfig(componentName);\n        if (!componentConfig || !componentConfig.enabled) {\n          continue;\n        }\n\n        const component = this.componentRegistry.create(\n          componentName,\n          componentName,\n          componentConfig as ComponentConfig\n        );\n\n        if (component) {\n          try {\n            const result = await component.render(context);\n            if (result.success && result.content) {\n              componentResults.push(result.content);\n            } else if (!result.success && result.error) {\n              console.error(`Component ${componentName} failed:`, result.error);\n            }\n          } catch (error) {\n            console.error(`Error rendering component ${componentName}:`, error);\n          }\n        }\n      }\n\n      // 合并组件结果 | Combine component results\n      const separator = this.config.style?.separator || ' ';\n      const result = componentResults.join(separator);\n\n      // 缓存结果 | Cache result\n      this.lastResult = result;\n\n      return result;\n    } catch (error) {\n      console.error('Error generating statusline:', error);\n      // 返回简化的错误状态 | Return simplified error status\n      return this.generateFallbackStatus(inputData);\n    }\n  }\n\n  /**\n   * 获取组件顺序 | Get component order\n   */\n  private getComponentOrder(): string[] {\n    const components = this.config.components;\n\n    // 如果配置了组件顺序，使用配置的顺序 | If component order is configured, use configured order\n    if (components?.order && Array.isArray(components.order)) {\n      return components.order;\n    }\n\n    // 使用预设系统解析组件顺序 | Use preset system to parse component order\n    const preset = this.config.preset || 'PMBTS';\n    return this.parsePreset(preset);\n  }\n\n  /**\n   * 解析预设字符串 | Parse preset string\n   */\n  private parsePreset(preset: string): string[] {\n    const mapping = this.config.preset_mapping || {\n      P: 'project',\n      M: 'model',\n      B: 'branch',\n      T: 'tokens',\n      S: 'status',\n    };\n\n    return preset\n      .split('')\n      .map((char) => mapping[char as keyof typeof mapping])\n      .filter(Boolean);\n  }\n\n  /**\n   * 获取组件配置 | Get component configuration\n   */\n  private getComponentConfig(componentName: string): Record<string, unknown> | null {\n    const components = this.config.components;\n    if (!components) return null;\n\n    return (components as Record<string, unknown>)[componentName] as Record<string, unknown> | null;\n  }\n\n  /**\n   * 检查是否应该更新 | Check if should update\n   */\n  private shouldUpdate(): boolean {\n    // 如果禁用缓存，总是允许更新 | Always allow update if cache is disabled\n    if (this.disableCache) {\n      return true;\n    }\n\n    const now = Date.now();\n    if (now - this.lastUpdate < this.updateInterval) {\n      return false;\n    }\n    this.lastUpdate = now;\n    return true;\n  }\n\n  /**\n   * 生成后备状态 | Generate fallback status\n   */\n  private generateFallbackStatus(inputData: InputData): string {\n    try {\n      // 基本的无颜色状态行 | Basic colorless statusline\n      const parts: string[] = [];\n\n      // 项目名 | Project name\n      if (inputData.workspace?.project_dir) {\n        const projectName = inputData.workspace.project_dir.split('/').pop();\n        if (projectName) {\n          parts.push(`[P] ${projectName}`);\n        }\n      }\n\n      // 模型 | Model\n      if (inputData.model?.id) {\n        const modelName = inputData.model.id.includes('sonnet') ? 'S4' : 'M';\n        parts.push(`[M] ${modelName}`);\n      }\n\n      // 状态 | Status\n      parts.push('[S] Ready');\n\n      return parts.join(' ');\n    } catch (_error) {\n      return '[ERR] Statusline Error';\n    }\n  }\n\n  /**\n   * 更新配置 | Update configuration\n   */\n  public updateConfig(newConfig: Config): void {\n    this.config = newConfig;\n    // 清除缓存 | Clear cache\n    this.lastResult = null;\n    this.lastUpdate = 0;\n  }\n\n  /**\n   * 获取当前配置 | Get current configuration\n   */\n  public getConfig(): Config {\n    return { ...this.config };\n  }\n\n  /**\n   * 获取终端能力信息 | Get terminal capability info\n   */\n  public getTerminalCapabilities() {\n    return getCapabilityInfo();\n  }\n\n  /**\n   * 强制刷新 | Force refresh\n   */\n  public forceRefresh(): void {\n    this.lastUpdate = 0;\n    this.lastResult = null;\n  }\n}\n","/**\n * Claude Code Statusline Pro - 公共API导出\n * Enhanced statusline for Claude Code with TypeScript, live preview, and interactive configuration\n *\n * @version 2.0.0-beta.1\n * @author wangnov\n * @license MIT\n */\n\nexport { ConfigEditor, createConfigEditor } from './cli/config-editor.js';\n// CLI 工具导出 (供高级用户使用)\nexport {\n  CliMessageIconManager,\n  formatCliMessage,\n  getCliIcon,\n  getCliIconManager,\n} from './cli/message-icons.js';\nexport { MockDataGenerator, mockDataGenerator } from './cli/mock-data.js';\nexport { createLivePreviewEngine, LivePreviewEngine } from './cli/preview-engine.js';\n// 组件系统导出\nexport { Component, ComponentFactory, ComponentRegistry } from './components/base.js';\nexport { BranchComponent } from './components/branch.js';\nexport { ModelComponent } from './components/model.js';\nexport { ProjectComponent } from './components/project.js';\nexport { StatusComponent } from './components/status.js';\nexport { TokensComponent } from './components/tokens.js';\n// 配置系统导出\nexport { ConfigLoader } from './config/loader.js';\n\n// 类型定义导出\nimport type { InputData } from './config/schema.js';\n\nexport type {\n  ComponentConfig,\n  ComponentMetadata,\n  // 组件相关类型\n  ComponentOptions,\n  // 配置相关类型\n  Config,\n  ConfigEditorOptions,\n  InputData,\n  // CLI相关类型\n  LivePreviewOptions,\n  MockScenario,\n  RenderContext,\n  RenderOptions,\n  StyleConfig,\n  ThemeConfig,\n} from './config/schema.js';\nexport * from './config/schema.js';\n// 核心功能导出\nexport { StatuslineGenerator } from './core/generator.js';\nexport {\n  getDebugInfo,\n  mergeInputData,\n  parseArguments,\n  parseInput,\n  parseJson,\n  validate,\n} from './core/parser.js';\nexport { ColorSystem, IconSystem } from './terminal/colors.js';\n// 终端系统导出\nexport { TerminalDetector } from './terminal/detector.js';\n\n// 工具函数导出\nexport * from './utils/index.js';\n\n/**\n * 版本信息\n */\nexport const VERSION = '2.0.0-beta.1';\n\n/**\n * 默认导出 - 主要的StatuslineGenerator类\n */\nexport { StatuslineGenerator as default } from './core/generator.js';\n\n/**\n * 快捷工厂函数 - 创建statusline生成器实例\n */\nexport async function createStatuslineGenerator(configPath?: string) {\n  const { ConfigLoader } = await import('./config/loader.js');\n  const { StatuslineGenerator } = await import('./core/generator.js');\n  const loader = new ConfigLoader();\n  const config = await loader.load(configPath);\n  return new StatuslineGenerator(config);\n}\n\n/**\n * 快捷函数 - 直接生成statusline\n */\nexport async function generateStatusline(\n  inputData: InputData,\n  configPath?: string\n): Promise<string> {\n  const generator = await createStatuslineGenerator(configPath);\n  return generator.generate(inputData);\n}\n\n/**\n * 类型保护函数 - 检查是否为有效的InputData\n */\nexport function isValidInputData(data: unknown): data is InputData {\n  return (\n    data !== null &&\n    typeof data === 'object' &&\n    'model' in data &&\n    typeof (data as Record<string, unknown>).model === 'object'\n  );\n}\n\n/**\n * 工具函数 - 获取默认配置\n */\nexport async function getDefaultConfig(): Promise<Record<string, unknown>> {\n  const { ConfigLoader } = await import('./config/loader.js');\n  const loader = new ConfigLoader();\n  return loader.getDefaultConfig();\n}\n\n/**\n * 工具函数 - 验证配置\n */\nexport async function validateConfig(_config: unknown): Promise<boolean> {\n  try {\n    const { ConfigLoader } = await import('./config/loader.js');\n    const loader = new ConfigLoader();\n    const result = await loader.validateConfig();\n    return result.valid;\n  } catch {\n    return false;\n  }\n}\n","/**\n * 交互式配置编辑器 - Interactive Configuration Editor\n * 核心功能: 全屏终端界面、实时预览集成、键盘导航\n *\n * 特性:\n * - Inquirer.js 驱动的交互式界面\n * - 实时预览配置变更效果\n * - 键盘导航和快捷键支持\n * - 配置项验证和错误提示\n * - 多层级配置管理 (组件/样式/主题)\n */\n\nimport { checkbox, confirm, input, select } from '@inquirer/prompts';\nimport { ConfigLoader } from '../config/loader.js';\nimport type { ComponentConfig, Config } from '../config/schema.js';\nimport { StatuslineGenerator } from '../core/generator.js';\nimport { TerminalDetector } from '../terminal/detector.js';\nimport { MockDataGenerator } from './mock-data.js';\nimport { LivePreviewEngine } from './preview-engine.js';\n\n/**\n * 配置编辑器选项\n */\nexport interface ConfigEditorOptions {\n  /** 配置文件路径 */\n  configPath?: string;\n  /** 是否启用实时预览 */\n  enableLivePreview?: boolean;\n  /** 是否自动保存 */\n  autoSave?: boolean;\n}\n\n/**\n * 配置菜单项接口\n */\n// interface ConfigMenuItem {\n//   name: string;\n//   value: string;\n//   description?: string;\n//   section?: string;\n// }\n\n/**\n * 交互式配置编辑器类\n */\nexport class ConfigEditor {\n  private configLoader: ConfigLoader;\n  private previewEngine: LivePreviewEngine | null = null;\n  private terminalDetector: TerminalDetector;\n  private currentConfig!: Config;\n  private options: Required<ConfigEditorOptions>;\n  private hasUnsavedChanges = false;\n\n  constructor(options: ConfigEditorOptions = {}) {\n    this.options = {\n      configPath: options.configPath || '',\n      enableLivePreview: options.enableLivePreview ?? true,\n      autoSave: options.autoSave ?? false,\n    };\n\n    if (options.configPath) {\n      this.options.configPath = options.configPath;\n    }\n\n    this.configLoader = new ConfigLoader();\n    this.terminalDetector = new TerminalDetector();\n\n    if (this.options.enableLivePreview) {\n      this.previewEngine = new LivePreviewEngine({\n        configPath: this.options.configPath,\n        refreshInterval: 100, // 快速响应配置变更\n      });\n    }\n  }\n\n  /**\n   * 启动交互式配置模式\n   */\n  async startInteractiveMode(): Promise<void> {\n    try {\n      // 初始化配置\n      await this.loadConfiguration();\n\n      // 检查终端兼容性\n      this.checkTerminalCompatibility();\n\n      // 初始化预览引擎\n      if (this.previewEngine) {\n        await this.previewEngine.initialize();\n      }\n\n      // 进入主配置循环（包含实时预览）\n      await this.runConfigurationLoop();\n    } catch (error) {\n      console.error('Configuration editor error:', error);\n      throw error;\n    } finally {\n      // 清理资源\n      if (this.previewEngine) {\n        this.previewEngine.stopLivePreview();\n      }\n    }\n  }\n\n  /**\n   * 加载配置\n   */\n  private async loadConfiguration(): Promise<void> {\n    try {\n      this.currentConfig = await this.configLoader.load(this.options.configPath);\n    } catch (error) {\n      console.error('Failed to load configuration:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 检查终端兼容性\n   */\n  private checkTerminalCompatibility(): void {\n    const capabilities = this.terminalDetector.detectCapabilities();\n\n    if (!process.stdin.isTTY) {\n      throw new Error('交互模式需要TTY终端');\n    }\n\n    console.log('🖥️  终端能力检测:');\n    console.log(`   颜色支持: ${capabilities.colors ? '✅' : '❌'}`);\n    console.log(`   表情符号: ${capabilities.emoji ? '✅' : '❌'}`);\n    console.log(`   Nerd Font: ${capabilities.nerdFont ? '✅' : '❌'}`);\n    console.log();\n  }\n\n  /**\n   * 渲染实时预览界面\n   */\n  private async renderLivePreviewInterface(): Promise<void> {\n    console.clear();\n\n    // 显示标题\n    const capabilities = this.terminalDetector.detectCapabilities();\n    const title = capabilities.colors\n      ? '\\x1b[1;36mClaude Code Statusline Pro v2.0.0\\x1b[0m'\n      : 'Claude Code Statusline Pro v2.0.0';\n    const subtitle = capabilities.colors\n      ? '\\x1b[36m🎛️  交互式配置编辑器 - Interactive Configuration Editor\\x1b[0m'\n      : '🎛️  交互式配置编辑器 - Interactive Configuration Editor';\n\n    console.log(title);\n    console.log(subtitle);\n\n    // 显示实时预览区域\n    console.log();\n    const previewTitle = capabilities.colors\n      ? '\\x1b[32m✅ 实时预览 - Live Preview (配置变化时自动更新)\\x1b[0m'\n      : '✅ 实时预览 - Live Preview (配置变化时自动更新)';\n    console.log(previewTitle);\n    console.log();\n\n    // 渲染预览场景\n    const scenarios = ['dev', 'critical', 'error'];\n\n    for (const scenarioId of scenarios) {\n      try {\n        const mockGenerator = new MockDataGenerator();\n        const mockData = mockGenerator.generate(scenarioId);\n        const scenario = mockGenerator.getScenario(scenarioId);\n\n        // 生成statusline\n        const generator = new StatuslineGenerator(this.currentConfig, { disableCache: true });\n        const output = await generator.generate(mockData);\n\n        // 显示场景信息和结果\n        const scenarioName = scenario?.name || scenarioId;\n        const _description = scenario?.description || '';\n\n        // 紧凑的显示格式\n        const scenarioLabel = capabilities.colors\n          ? `\\x1b[90m场景: ${scenarioName}\\x1b[0m`\n          : `场景: ${scenarioName}`;\n\n        console.log(`${scenarioLabel}`);\n        console.log(output);\n        console.log();\n      } catch (error) {\n        const errorLabel = capabilities.colors\n          ? `\\x1b[31m场景: ${scenarioId} - 错误\\x1b[0m`\n          : `场景: ${scenarioId} - 错误`;\n\n        console.log(errorLabel);\n        console.log(`❌ 渲染失败: ${error instanceof Error ? error.message : String(error)}`);\n        console.log();\n      }\n    }\n\n    // 分隔线\n    const separator = capabilities.colors ? `\\x1b[90m${'─'.repeat(70)}\\x1b[0m` : '─'.repeat(70);\n    console.log(separator);\n  }\n\n  /**\n   * 运行主配置循环\n   */\n  private async runConfigurationLoop(): Promise<void> {\n    let continueEditing = true;\n\n    while (continueEditing) {\n      try {\n        // 清屏并显示实时预览\n        await this.renderLivePreviewInterface();\n\n        const action = await this.showMainMenu();\n\n        switch (action) {\n          case 'components':\n            await this.configureComponents();\n            break;\n          case 'themes':\n            await this.configureThemes();\n            break;\n          case 'styles':\n            await this.configureStyles();\n            break;\n          case 'presets':\n            await this.configurePresets();\n            break;\n          case 'reset':\n            await this.resetConfiguration();\n            break;\n          case 'save':\n            await this.saveConfiguration();\n            break;\n          case 'exit':\n            continueEditing = await this.handleExit();\n            break;\n          default:\n            console.log('Unknown action:', action);\n        }\n      } catch (error) {\n        if (error instanceof Error && error.name === 'ExitPromptError') {\n          continueEditing = await this.handleExit();\n        } else {\n          console.error('Configuration error:', error);\n          await this.waitForKeyPress();\n        }\n      }\n    }\n  }\n\n  /**\n   * 显示主菜单\n   */\n  private async showMainMenu(): Promise<string> {\n    const unsavedIndicator = this.hasUnsavedChanges ? ' (*)' : '';\n\n    return await select({\n      message: `配置菜单${unsavedIndicator}`,\n      choices: [\n        {\n          name: '🧩 组件配置 - 配置显示组件',\n          value: 'components',\n          description: '启用/禁用和配置各个状态行组件',\n        },\n        {\n          name: '🎨 主题管理 - 主题管理',\n          value: 'themes',\n          description: '选择和自定义视觉主题',\n        },\n        {\n          name: '💄 样式设置 - 样式设置',\n          value: 'styles',\n          description: '配置颜色、图标和视觉元素',\n        },\n        {\n          name: '📋 组件预设 - 组件预设',\n          value: 'presets',\n          description: '管理组件顺序和预设配置',\n        },\n        {\n          name: '🔄 重置配置 - 重置为默认',\n          value: 'reset',\n          description: '将配置重置为出厂默认值',\n        },\n        {\n          name: '💾 保存配置 - 保存配置',\n          value: 'save',\n          description: '保存当前配置到文件',\n        },\n        {\n          name: '🚪 退出编辑器 - 退出编辑器',\n          value: 'exit',\n          description: '退出配置编辑器',\n        },\n      ],\n      pageSize: 10,\n    });\n  }\n\n  /**\n   * 配置组件\n   */\n  private async configureComponents(): Promise<void> {\n    const componentName = await select({\n      message: '选择要配置的组件：',\n      choices: [\n        { name: '📁 项目名称 - 项目名称显示', value: 'project' },\n        { name: '🤖 AI模型 - AI模型信息', value: 'model' },\n        { name: '🌿 Git分支 - Git分支显示', value: 'branch' },\n        { name: '📊 Token使用 - Token使用率和进度', value: 'tokens' },\n        { name: '⚡ 会话状态 - 会话状态指示器', value: 'status' },\n        { name: '← 返回主菜单', value: 'back' },\n      ],\n    });\n\n    if (componentName === 'back') return;\n\n    await this.configureIndividualComponent(componentName);\n  }\n\n  /**\n   * 配置单个组件\n   */\n  private async configureIndividualComponent(componentName: string): Promise<void> {\n    const component = this.currentConfig.components?.[\n      componentName as keyof typeof this.currentConfig.components\n    ] as ComponentConfig;\n\n    if (!component) {\n      console.log(`组件 ${componentName} 未找到`);\n      return;\n    }\n\n    console.log(`\\\\n🔧 配置 ${componentName} 组件:`);\n\n    // 启用/禁用组件\n    const enabled = await confirm({\n      message: `启用 ${componentName} 组件？`,\n      default: component.enabled,\n    });\n\n    // 配置图标\n    let icon = component.icon;\n    if (enabled) {\n      icon = await input({\n        message: `${componentName} 组件图标：`,\n        default: component.icon,\n      });\n    }\n\n    // 配置颜色\n    let color = component.color;\n    if (enabled) {\n      color = await select({\n        message: `${componentName} 组件颜色：`,\n        choices: [\n          { name: '青色 (默认)', value: 'cyan' },\n          { name: '绿色', value: 'green' },\n          { name: '黄色', value: 'yellow' },\n          { name: '蓝色', value: 'blue' },\n          { name: '紫红色', value: 'magenta' },\n          { name: '红色', value: 'red' },\n          { name: '白色', value: 'white' },\n          { name: '灰色', value: 'gray' },\n        ],\n        default: component.color || 'cyan',\n      });\n    }\n\n    // 更新配置\n    const updatedComponent = {\n      ...component,\n      enabled,\n      icon,\n      color,\n    };\n\n    this.currentConfig.components = {\n      order: this.currentConfig.components?.order || [\n        'project',\n        'model',\n        'branch',\n        'tokens',\n        'status',\n      ],\n      ...this.currentConfig.components,\n      [componentName]: updatedComponent,\n    };\n\n    this.hasUnsavedChanges = true;\n\n    console.log(`✅ ${componentName} 组件配置已更新！`);\n    await this.waitForKeyPress();\n  }\n\n  /**\n   * 配置主题\n   */\n  private async configureThemes(): Promise<void> {\n    const theme = await select({\n      message: '选择主题：',\n      choices: [\n        { name: '简洁主题 - 清爽简单', value: 'minimal' },\n        { name: '详细主题 - 详细信息', value: 'verbose' },\n        { name: '开发者主题 - 便于调试', value: 'developer' },\n        { name: '自定义主题 - 当前配置', value: 'custom' },\n        { name: '← 返回主菜单', value: 'back' },\n      ],\n    });\n\n    if (theme === 'back') return;\n\n    if (theme !== 'custom') {\n      await this.configLoader.applyTheme(theme);\n      this.currentConfig = await this.configLoader.load();\n      this.hasUnsavedChanges = true;\n    }\n\n    console.log(`✅ 已应用主题: ${theme}`);\n    await this.waitForKeyPress();\n  }\n\n  /**\n   * 配置样式\n   */\n  private async configureStyles(): Promise<void> {\n    const style = this.currentConfig.style;\n\n    const enableColors = await confirm({\n      message: '启用颜色？',\n      default: style?.enable_colors === true,\n    });\n\n    const enableEmoji = await confirm({\n      message: '启用表情符号？',\n      default: style?.enable_emoji === true,\n    });\n\n    const enableNerdFont = await confirm({\n      message: '启用 Nerd Font 图标？',\n      default: style?.enable_nerd_font === true,\n    });\n\n    const separator = await input({\n      message: '组件分隔符：',\n      default: style?.separator || ' | ',\n    });\n\n    // 更新配置\n    this.currentConfig.style = {\n      separator,\n      enable_colors: enableColors,\n      enable_emoji: enableEmoji,\n      enable_nerd_font: enableNerdFont,\n      compact_mode: style?.compact_mode || false,\n      max_width: style?.max_width || 0,\n    };\n\n    this.hasUnsavedChanges = true;\n\n    console.log('✅ 样式设置已更新！');\n    await this.waitForKeyPress();\n  }\n\n  /**\n   * 配置预设\n   */\n  private async configurePresets(): Promise<void> {\n    const preset = await select({\n      message: '选择组件预设：',\n      choices: [\n        { name: 'PMBTS - 项目、模型、分支、Token、状态', value: 'PMBTS' },\n        { name: 'PMB - 仅项目、模型、分支', value: 'PMB' },\n        { name: 'PMBT - 项目、模型、分支、Token', value: 'PMBT' },\n        { name: 'MBT - 模型、分支、Token', value: 'MBT' },\n        { name: '自定义 - 手动配置', value: 'custom' },\n        { name: '← 返回主菜单', value: 'back' },\n      ],\n    });\n\n    if (preset === 'back') return;\n\n    if (preset === 'custom') {\n      // 自定义组件选择\n      const selectedComponents = await checkbox({\n        message: '选择要显示的组件：',\n        choices: [\n          { name: '项目名称', value: 'project' },\n          { name: 'AI模型', value: 'model' },\n          { name: 'Git分支', value: 'branch' },\n          { name: 'Token使用', value: 'tokens' },\n          { name: '会话状态', value: 'status' },\n        ],\n      });\n\n      if (this.currentConfig.components) {\n        this.currentConfig.components.order = selectedComponents;\n      } else {\n        this.currentConfig.components = { order: selectedComponents };\n      }\n    } else {\n      this.currentConfig.preset = preset;\n    }\n\n    this.hasUnsavedChanges = true;\n\n    console.log(`✅ 已应用预设: ${preset}`);\n    await this.waitForKeyPress();\n  }\n\n  /**\n   * 重置配置\n   */\n  private async resetConfiguration(): Promise<void> {\n    const confirmReset = await confirm({\n      message: '确定要将所有配置重置为默认值吗？此操作无法撤销。',\n      default: false,\n    });\n\n    if (confirmReset) {\n      await this.configLoader.resetToDefaults(this.options.configPath);\n      this.currentConfig = await this.configLoader.load();\n      this.hasUnsavedChanges = false;\n\n      console.log('✅ 配置已重置为默认值');\n    } else {\n      console.log('重置已取消');\n    }\n\n    await this.waitForKeyPress();\n  }\n\n  /**\n   * 保存配置\n   */\n  private async saveConfiguration(): Promise<void> {\n    try {\n      await this.configLoader.save(this.currentConfig, this.options.configPath);\n      this.hasUnsavedChanges = false;\n      console.log('✅ 配置保存成功');\n    } catch (error) {\n      console.error('配置保存失败:', error);\n    }\n\n    await this.waitForKeyPress();\n  }\n\n  /**\n   * 处理退出\n   */\n  private async handleExit(): Promise<boolean> {\n    if (this.hasUnsavedChanges) {\n      const action = await select({\n        message: '您有未保存的更改。您希望如何处理？',\n        choices: [\n          { name: '保存并退出', value: 'save' },\n          { name: '不保存直接退出', value: 'discard' },\n          { name: '取消（继续编辑）', value: 'cancel' },\n        ],\n      });\n\n      switch (action) {\n        case 'save':\n          await this.saveConfiguration();\n          return false; // Exit\n        case 'discard':\n          return false; // Exit without saving\n        case 'cancel':\n          return true; // Continue editing\n      }\n    }\n\n    return false; // Exit\n  }\n\n  /**\n   * 等待按键\n   */\n  private async waitForKeyPress(): Promise<void> {\n    console.log('\\n按任意键继续...');\n    return new Promise<void>((resolve) => {\n      const stdin = process.stdin;\n\n      // 设置stdin为原始模式\n      if (stdin.isTTY) {\n        stdin.setRawMode(true);\n        stdin.resume();\n        stdin.setEncoding('utf8');\n      }\n\n      const onData = (key: string) => {\n        // 清理监听器\n        stdin.removeListener('data', onData);\n\n        // 恢复stdin模式\n        if (stdin.isTTY) {\n          stdin.setRawMode(false);\n          stdin.pause();\n        }\n\n        // Ctrl+C 处理\n        if (key === '\\u0003') {\n          console.log('\\n👋 已退出配置编辑器');\n          process.exit(0);\n        }\n\n        resolve();\n      };\n\n      stdin.on('data', onData);\n    });\n  }\n}\n\n/**\n * 工厂函数 - 创建配置编辑器实例\n */\nexport function createConfigEditor(options?: ConfigEditorOptions): ConfigEditor {\n  return new ConfigEditor(options);\n}\n","/**\n * Mock数据生成器 - 实时预览系统核心\n * 生成各种状态和使用场景的模拟数据，支持多场景预览和测试\n */\n\nimport type { InputData } from '../config/schema.js';\n\n/**\n * Mock场景接口定义\n */\nexport interface MockScenario {\n  /** 场景标识符 */\n  id: string;\n  /** 场景名称 */\n  name: string;\n  /** 场景描述 */\n  description: string;\n  /** 输入数据 */\n  inputData: InputData;\n  /** Token使用率 (0-100) */\n  tokenUsage?: number;\n  /** 预期状态 */\n  expectedStatus?: 'ready' | 'thinking' | 'tool_use' | 'error' | 'complete';\n}\n\n/**\n * Mock数据生成器类\n */\nexport class MockDataGenerator {\n  private scenarios: Map<string, MockScenario> = new Map();\n\n  constructor() {\n    this.initializeScenarios();\n  }\n\n  /**\n   * 初始化所有Mock场景\n   */\n  private initializeScenarios(): void {\n    // 开发场景 - 正常开发状态\n    this.scenarios.set('dev', {\n      id: 'dev',\n      name: '开发中',\n      description: '正常开发项目，低token使用率，一切运行良好',\n      inputData: {\n        hookEventName: 'Status',\n        sessionId: 'dev_session_123',\n        model: { id: 'claude-sonnet-4' },\n        workspace: {\n          current_dir: '/Users/developer/my-awesome-project',\n          project_dir: '/Users/developer/my-awesome-project',\n        },\n        transcriptPath: '/tmp/claude_transcript_dev.json',\n        cwd: '/Users/developer/my-awesome-project',\n        gitBranch: 'feature/user-auth',\n      },\n      tokenUsage: 25,\n      expectedStatus: 'ready',\n    });\n\n    // 临界状态场景 - 高token使用\n    this.scenarios.set('critical', {\n      id: 'critical',\n      name: '临界状态',\n      description: 'Token使用接近上限，需要注意上下文管理',\n      inputData: {\n        hookEventName: 'Status',\n        sessionId: 'critical_session_456',\n        model: { id: 'claude-opus-4.1' },\n        workspace: {\n          current_dir: '/Users/developer/enterprise-system',\n          project_dir: '/Users/developer/enterprise-system',\n        },\n        transcriptPath: '/tmp/claude_transcript_critical.json',\n        cwd: '/Users/developer/large-enterprise-system',\n        gitBranch: null,\n      },\n      tokenUsage: 92,\n      expectedStatus: 'ready',\n    });\n\n    // 错误状态场景 - API错误\n    this.scenarios.set('error', {\n      id: 'error',\n      name: '错误状态',\n      description: 'API调用失败或工具执行出错',\n      inputData: {\n        hookEventName: 'Status',\n        sessionId: 'error_session_789',\n        model: { id: 'claude-haiku-3.5' },\n        workspace: {\n          current_dir: '/Users/developer/error-prone-app',\n          project_dir: '/Users/developer/error-prone-app',\n        },\n        transcriptPath: '/tmp/claude_transcript_error.json',\n        cwd: '/Users/developer/error-prone-app',\n        gitBranch: 'bugfix/critical-error',\n      },\n      tokenUsage: 45,\n      expectedStatus: 'error',\n    });\n\n    // 思考状态场景 - AI正在处理复杂任务\n    this.scenarios.set('thinking', {\n      id: 'thinking',\n      name: '思考中',\n      description: 'AI正在处理复杂任务，深度思考模式',\n      inputData: {\n        hookEventName: 'Status',\n        sessionId: 'thinking_session_101',\n        model: { id: 'claude-opus-4.1' },\n        workspace: {\n          current_dir: '/Users/developer/ai-research-project',\n          project_dir: '/Users/developer/ai-research-project',\n        },\n        transcriptPath: '/tmp/claude_transcript_thinking.json',\n        cwd: '/Users/developer/ai-research-project',\n        gitBranch: null,\n      },\n      tokenUsage: 65,\n      expectedStatus: 'thinking',\n    });\n\n    // 工具使用场景 - 正在执行工具调用\n    this.scenarios.set('tool', {\n      id: 'tool',\n      name: '工具执行',\n      description: '正在执行工具调用，如文件操作、代码分析等',\n      inputData: {\n        hookEventName: 'Status',\n        sessionId: 'tool_session_202',\n        model: { id: 'claude-sonnet-4' },\n        workspace: {\n          current_dir: '/Users/developer/automation-scripts',\n          project_dir: '/Users/developer/automation-scripts',\n        },\n        transcriptPath: '/tmp/claude_transcript_tool.json',\n        cwd: '/Users/developer/automation-scripts',\n        gitBranch: null,\n      },\n      tokenUsage: 55,\n      expectedStatus: 'tool_use',\n    });\n\n    // 完成状态场景 - 任务完成\n    this.scenarios.set('complete', {\n      id: 'complete',\n      name: '任务完成',\n      description: '任务成功完成，准备接受新的指令',\n      inputData: {\n        hookEventName: 'Status',\n        sessionId: 'complete_session_303',\n        model: { id: 'claude-sonnet-4' },\n        workspace: {\n          current_dir: '/Users/developer/completed-feature',\n          project_dir: '/Users/developer/completed-feature',\n        },\n        transcriptPath: '/tmp/claude_transcript_complete.json',\n        cwd: '/Users/developer/completed-feature',\n        gitBranch: null,\n      },\n      tokenUsage: 35,\n      expectedStatus: 'complete',\n    });\n\n    // 空项目场景 - 新项目或空目录\n    this.scenarios.set('empty', {\n      id: 'empty',\n      name: '空项目',\n      description: '新建项目或空目录，基础状态',\n      inputData: {\n        hookEventName: 'Status',\n        sessionId: 'empty_session_404',\n        model: { id: 'claude-haiku-3.5' },\n        workspace: {\n          current_dir: '/Users/developer/new-project',\n          project_dir: '/Users/developer/new-project',\n        },\n        transcriptPath: '/tmp/claude_transcript_empty.json',\n        cwd: '/Users/developer/new-project',\n        gitBranch: null,\n      },\n      tokenUsage: 8,\n      expectedStatus: 'ready',\n    });\n\n    // Git场景 - 有分支信息\n    this.scenarios.set('git', {\n      id: 'git',\n      name: 'Git项目',\n      description: 'Git管理的项目，包含分支和仓库信息',\n      inputData: {\n        hookEventName: 'Status',\n        sessionId: 'git_session_505',\n        model: { id: 'claude-sonnet-4' },\n        workspace: {\n          current_dir: '/Users/developer/web-application',\n          project_dir: '/Users/developer/web-application',\n        },\n        transcriptPath: '/tmp/claude_transcript_git.json',\n        cwd: '/Users/developer/web-application',\n        gitBranch: 'feature/user-authentication',\n      },\n      tokenUsage: 42,\n      expectedStatus: 'ready',\n    });\n  }\n\n  /**\n   * 根据场景ID生成Mock数据\n   */\n  generate(scenarioId: string): InputData {\n    const scenario = this.scenarios.get(scenarioId.toLowerCase());\n    if (!scenario) {\n      throw new Error(\n        `Unknown mock scenario: ${scenarioId}. Available: ${this.getAvailableScenarios().join(', ')}`\n      );\n    }\n\n    // 深度克隆避免修改原始数据\n    const mockData = JSON.parse(JSON.stringify(scenario.inputData)) as InputData;\n\n    // 添加Mock元数据，供组件使用 | Add mock metadata for components\n    (mockData as Record<string, unknown>).__mock__ = {\n      tokenUsage: scenario.tokenUsage || 0,\n      status: scenario.expectedStatus || 'ready',\n      scenarioId: scenario.id,\n      scenarioName: scenario.name,\n    };\n\n    return mockData;\n  }\n\n  /**\n   * 获取场景详情\n   */\n  getScenario(scenarioId: string): MockScenario | undefined {\n    return this.scenarios.get(scenarioId.toLowerCase());\n  }\n\n  /**\n   * 获取所有可用场景\n   */\n  getAvailableScenarios(): string[] {\n    return Array.from(this.scenarios.keys());\n  }\n\n  /**\n   * 获取所有场景详情\n   */\n  getAllScenarios(): MockScenario[] {\n    return Array.from(this.scenarios.values());\n  }\n\n  /**\n   * 根据token使用率筛选场景\n   */\n  getScenariosByTokenUsage(minUsage: number, maxUsage: number): MockScenario[] {\n    return this.getAllScenarios().filter((scenario) => {\n      const usage = scenario.tokenUsage || 0;\n      return usage >= minUsage && usage <= maxUsage;\n    });\n  }\n\n  /**\n   * 根据状态筛选场景\n   */\n  getScenariosByStatus(status: MockScenario['expectedStatus']): MockScenario[] {\n    return this.getAllScenarios().filter((scenario) => scenario.expectedStatus === status);\n  }\n\n  /**\n   * 生成随机场景数据\n   */\n  generateRandom(): InputData {\n    const scenarios = this.getAvailableScenarios();\n    const randomScenario = scenarios[Math.floor(Math.random() * scenarios.length)];\n    return this.generate(randomScenario || 'dev');\n  }\n\n  /**\n   * 添加自定义场景\n   */\n  addCustomScenario(scenario: MockScenario): void {\n    this.scenarios.set(scenario.id, scenario);\n  }\n\n  /**\n   * 生成压力测试场景 - 极限token使用\n   */\n  generateStressTestScenario(): InputData {\n    return {\n      hookEventName: 'Status',\n      sessionId: 'stress_test_999',\n      model: { id: 'claude-opus-4.1' },\n      workspace: {\n        current_dir: '/Users/developer/massive-codebase',\n        project_dir: '/Users/developer/massive-codebase',\n      },\n      transcriptPath: '/tmp/claude_transcript_stress.json',\n      cwd: '/Users/developer/massive-codebase',\n      gitBranch: 'performance/optimization-hell',\n    };\n  }\n}\n\n/**\n * 默认导出Mock数据生成器实例\n */\nexport const mockDataGenerator = new MockDataGenerator();\n","/**\n * 实时预览引擎 - Live Preview Engine\n * 核心功能: 多场景并行渲染、实时配置更新、动态状态展示\n *\n * 特性:\n * - 多场景Mock数据同时预览\n * - 实时配置变更响应 (<100ms)\n * - 动态状态指示器和进度条\n * - 智能终端兼容性检测\n * - 可配置刷新频率和显示模式\n */\n\nimport { ConfigLoader } from '../config/loader.js';\nimport type { Config } from '../config/schema.js';\nimport { StatuslineGenerator } from '../core/generator.js';\nimport type { TerminalCapabilities } from '../terminal/detector.js';\nimport { TerminalDetector } from '../terminal/detector.js';\nimport { MockDataGenerator, type MockScenario } from './mock-data.js';\n\n// ANSI转义序列正则表达式 | ANSI escape sequence regex\nconst ANSI_ESCAPE_REGEX = new RegExp(`${String.fromCharCode(27)}\\\\[[0-9;]*m`, 'g');\n\n/**\n * 预览引擎配置接口\n */\nexport interface LivePreviewOptions {\n  /** 配置文件路径 */\n  configPath?: string;\n  /** 指定主题 */\n  theme?: string;\n  /** 刷新频率(毫秒) */\n  refreshInterval?: number;\n  /** 显示场景数量 */\n  maxScenarios?: number;\n  /** 是否显示调试信息 */\n  debug?: boolean;\n  /** 是否启用动态Banner */\n  dynamicBanner?: boolean;\n}\n\n/**\n * 渲染结果接口\n */\nexport interface RenderResult {\n  /** 场景ID */\n  scenarioId: string;\n  /** 渲染结果 */\n  output: string;\n  /** 渲染时间(毫秒) */\n  renderTime: number;\n  /** 是否有错误 */\n  hasError: boolean;\n  /** 错误信息 */\n  error?: string;\n}\n\n/**\n * 实时预览引擎类\n */\nexport class LivePreviewEngine {\n  private generator!: StatuslineGenerator;\n  private configLoader: ConfigLoader;\n  private mockGenerator: MockDataGenerator;\n  private terminalDetector: TerminalDetector;\n  private currentConfig!: Config;\n  private options: {\n    configPath?: string;\n    theme?: string;\n    refreshInterval: number;\n    maxScenarios: number;\n    debug: boolean;\n    dynamicBanner: boolean;\n  };\n  private isRunning = false;\n\n  constructor(options: LivePreviewOptions = {}) {\n    this.options = {\n      refreshInterval: options.refreshInterval || 300,\n      maxScenarios: options.maxScenarios || 6,\n      debug: options.debug || false,\n      dynamicBanner: options.dynamicBanner ?? true,\n    };\n\n    if (options.configPath) {\n      this.options.configPath = options.configPath;\n    }\n\n    if (options.theme) {\n      this.options.theme = options.theme;\n    }\n\n    this.configLoader = new ConfigLoader();\n    this.mockGenerator = new MockDataGenerator();\n    this.terminalDetector = new TerminalDetector();\n  }\n\n  /**\n   * 公开的初始化方法\n   */\n  async initialize(): Promise<void> {\n    try {\n      this.currentConfig = await this.configLoader.load(this.options.configPath);\n      if (this.options.theme) {\n        await this.configLoader.applyTheme(this.options.theme);\n        this.currentConfig = await this.configLoader.load();\n      }\n      // 在预览模式下禁用缓存，确保每个场景都能正确渲染\n      this.generator = new StatuslineGenerator(this.currentConfig, { disableCache: true });\n    } catch (error) {\n      console.error('Failed to initialize preview engine:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 异步初始化 - 私有方法，确保初始化\n   */\n  private async ensureInitialized(): Promise<void> {\n    if (!this.generator || !this.currentConfig) {\n      await this.initialize();\n    }\n  }\n\n  /**\n   * 启动实时预览模式\n   */\n  async startLivePreview(): Promise<void> {\n    if (this.isRunning) {\n      throw new Error('Preview engine is already running');\n    }\n\n    await this.ensureInitialized();\n    this.isRunning = true;\n\n    // 设置键盘处理\n    this.setupKeyboardHandling();\n\n    // 清屏并初始化显示\n    this.clearScreen();\n    await this.renderLivePreview();\n\n    // 开始实时更新循环\n    const intervalId = setInterval(async () => {\n      if (!this.isRunning) {\n        clearInterval(intervalId);\n        return;\n      }\n      await this.renderLivePreview();\n    }, this.options.refreshInterval);\n\n    // 优雅处理退出\n    process.on('SIGINT', () => {\n      this.isRunning = false;\n      clearInterval(intervalId);\n      console.log('\\n👋 Preview stopped');\n      process.exit(0);\n    });\n  }\n\n  /**\n   * 停止实时预览\n   */\n  stopLivePreview(): void {\n    this.isRunning = false;\n\n    // 恢复终端状态\n    if (process.stdin.isTTY) {\n      process.stdin.setRawMode(false);\n      process.stdin.pause();\n    }\n\n    // 清屏并显示退出消息\n    console.clear();\n    console.log('\\n👋 实时预览已停止 - Live Preview stopped');\n\n    // 退出进程\n    process.exit(0);\n  }\n\n  /**\n   * 渲染实时预览界面\n   */\n  private async renderLivePreview(): Promise<void> {\n    const capabilities = this.terminalDetector.detectCapabilities();\n    const scenarios = this.getSelectedScenarios();\n\n    // 移动光标到顶部\n    process.stdout.write('\\x1b[H');\n\n    // 渲染标题栏\n    this.renderHeader(capabilities);\n\n    // 渲染动态Banner\n    if (this.options.dynamicBanner) {\n      await this.renderDynamicBanner();\n    }\n\n    // 渲染配置信息\n    this.renderConfigInfo();\n\n    // 渲染场景预览\n    await this.renderScenariosPreview(scenarios, capabilities);\n\n    // 渲染快捷键提示\n    this.renderShortcutsHelp(capabilities);\n  }\n\n  /**\n   * 渲染静态预览 - 用于preview子命令\n   */\n  async renderStaticPreview(scenarioIds: string[]): Promise<void> {\n    await this.ensureInitialized();\n\n    const capabilities = this.terminalDetector.detectCapabilities();\n    console.log(this.formatTitle('Claude Code Statusline Pro - Static Preview', capabilities));\n    console.log();\n\n    for (const scenarioId of scenarioIds) {\n      try {\n        const result = await this.renderScenario(scenarioId);\n        console.log(this.formatScenarioOutput(result, capabilities));\n      } catch (error) {\n        console.error(`Error rendering scenario ${scenarioId}:`, error);\n      }\n    }\n  }\n\n  /**\n   * 更新配置并刷新预览\n   */\n  async updateConfig(changes: Partial<Config>): Promise<void> {\n    try {\n      // 合并配置变更\n      this.currentConfig = { ...this.currentConfig, ...changes };\n\n      // 重新创建生成器，保持缓存禁用\n      this.generator = new StatuslineGenerator(this.currentConfig, { disableCache: true });\n\n      // 立即刷新预览\n      if (this.isRunning) {\n        await this.renderLivePreview();\n      }\n    } catch (error) {\n      console.error('Failed to update config:', error);\n    }\n  }\n\n  /**\n   * 获取要预览的场景列表\n   */\n  private getSelectedScenarios(): MockScenario[] {\n    const allScenarios = this.mockGenerator.getAllScenarios();\n    return allScenarios.slice(0, this.options.maxScenarios);\n  }\n\n  /**\n   * 渲染单个场景\n   */\n  private async renderScenario(scenarioId: string): Promise<RenderResult> {\n    const startTime = Date.now();\n\n    try {\n      const inputData = this.mockGenerator.generate(scenarioId);\n      const output = await this.generator.generate(inputData);\n\n      return {\n        scenarioId,\n        output,\n        renderTime: Date.now() - startTime,\n        hasError: false,\n      };\n    } catch (error) {\n      return {\n        scenarioId,\n        output: '',\n        renderTime: Date.now() - startTime,\n        hasError: true,\n        error: error instanceof Error ? error.message : String(error),\n      };\n    }\n  }\n\n  /**\n   * 渲染标题栏\n   */\n  private renderHeader(capabilities: TerminalCapabilities): void {\n    const title = this.formatTitle('Claude Code Statusline Pro v2.0.0', capabilities);\n    const subtitle = capabilities.colors\n      ? '\\x1b[36m📊 实时预览模式 - Live Preview\\x1b[0m'\n      : '📊 实时预览模式 - Live Preview';\n\n    console.log(title);\n    console.log(subtitle);\n    console.log(this.formatSeparator(capabilities));\n    console.log();\n  }\n\n  /**\n   * 渲染动态Banner\n   */\n  private async renderDynamicBanner(): Promise<void> {\n    // 模拟动态状态更新\n    const timestamp = new Date().toLocaleTimeString();\n    const uptime = process.uptime().toFixed(1);\n\n    console.log(`⏰ 更新时间: ${timestamp}  📈 运行时间: ${uptime}s`);\n    console.log();\n  }\n\n  /**\n   * 渲染配置信息\n   */\n  private renderConfigInfo(): void {\n    const configSource = this.configLoader.getConfigSource() || 'default';\n    const theme = this.currentConfig.theme || 'default';\n\n    console.log(`📝 配置源: ${configSource}`);\n    console.log(`🎨 当前主题: ${theme}`);\n    console.log(`🔧 组件预设: ${this.currentConfig.preset || 'PMBTS'}`);\n    console.log();\n  }\n\n  /**\n   * 渲染场景预览\n   */\n  private async renderScenariosPreview(\n    scenarios: MockScenario[],\n    capabilities: TerminalCapabilities\n  ): Promise<void> {\n    for (const scenario of scenarios) {\n      const result = await this.renderScenario(scenario.id);\n      console.log(this.formatScenarioOutput(result, capabilities, scenario));\n      console.log();\n    }\n  }\n\n  /**\n   * 渲染快捷键帮助\n   */\n  private renderShortcutsHelp(capabilities: TerminalCapabilities): void {\n    const helpText = capabilities.colors\n      ? '\\x1b[90m快捷键: [c] 配置  [t] 主题  [p] 预设  [r] 刷新  [q] 退出\\x1b[0m'\n      : '快捷键: [c] 配置  [t] 主题  [p] 预设  [r] 刷新  [q] 退出';\n\n    console.log(this.formatSeparator(capabilities));\n    console.log(helpText);\n  }\n\n  /**\n   * 获取不包含ANSI代码的可见文本长度\n   */\n  private getVisibleLength(text: string): number {\n    // 移除ANSI转义序列\n    return text.replace(ANSI_ESCAPE_REGEX, '').length;\n  }\n\n  /**\n   * 对包含ANSI代码的文本进行可视化padding\n   */\n  private padEndVisible(text: string, targetLength: number): string {\n    const visibleLength = this.getVisibleLength(text);\n    const paddingNeeded = Math.max(0, targetLength - visibleLength);\n    return text + ' '.repeat(paddingNeeded);\n  }\n\n  /**\n   * 获取终端宽度\n   */\n  private getTerminalWidth(): number {\n    return process.stdout.columns || parseInt(process.env.COLUMNS || '80') || 80;\n  }\n\n  /**\n   * 格式化场景输出\n   */\n  private formatScenarioOutput(\n    result: RenderResult,\n    capabilities: TerminalCapabilities,\n    scenario?: MockScenario\n  ): string {\n    const scenarioInfo = scenario ? ` - ${scenario.name}` : '';\n    const performanceInfo = this.options.debug ? ` (${result.renderTime}ms)` : '';\n\n    // 获取终端宽度并预留边距\n    const terminalWidth = this.getTerminalWidth();\n    const maxBoxWidth = terminalWidth - 2; // 预留2字符边距\n\n    // 计算header和content的可见长度\n    const headerText = `场景: ${result.scenarioId}${scenarioInfo}${performanceInfo}`;\n    const headerVisibleLength = this.getVisibleLength(headerText);\n\n    const contentText = result.hasError\n      ? capabilities.colors\n        ? `❌ 错误: ${result.error}`\n        : `❌ 错误: ${result.error}`\n      : result.output;\n    const contentVisibleLength = this.getVisibleLength(contentText);\n\n    // 根据内容确定框线宽度，但不超过终端宽度\n    const idealBoxWidth = Math.max(\n      headerVisibleLength + 8, // header + \"┌─ \" + \" ─┐\"\n      contentVisibleLength + 4 // content + \"│ \" + \" │\"\n    );\n    const boxWidth = Math.min(idealBoxWidth, maxBoxWidth);\n\n    // 生成顶部框线\n    const topBorderLength = boxWidth - headerVisibleLength - 4; // 减去 \"┌─ \" + \" \"\n    const topBorder = '─'.repeat(Math.max(1, topBorderLength));\n\n    let output = `┌─ ${headerText} ${topBorder}┐\\n`;\n\n    // 生成内容行 - 如果内容过长则截断\n    const maxContentWidth = boxWidth - 4; // 减去 \"│ \" + \" │\"\n\n    if (result.hasError) {\n      const errorMsg = capabilities.colors\n        ? `\\x1b[31m❌ 错误: ${result.error}\\x1b[0m`\n        : `❌ 错误: ${result.error}`;\n\n      let displayMsg = errorMsg;\n      if (this.getVisibleLength(errorMsg) > maxContentWidth) {\n        // 截断过长的错误消息\n        const visibleError = errorMsg.replace(ANSI_ESCAPE_REGEX, '');\n        const truncatedError = `${visibleError.substring(0, maxContentWidth - 3)}...`;\n        displayMsg = capabilities.colors ? `\\x1b[31m${truncatedError}\\x1b[0m` : truncatedError;\n      }\n\n      output += `│ ${this.padEndVisible(displayMsg, maxContentWidth)} │\\n`;\n    } else {\n      let displayOutput = result.output;\n      if (this.getVisibleLength(displayOutput) > maxContentWidth) {\n        // 截断过长的内容，但保持ANSI代码完整性\n        const truncatedOutput = `${this.truncateWithAnsi(displayOutput, maxContentWidth - 3)}...`;\n        displayOutput = truncatedOutput;\n      }\n\n      output += `│ ${this.padEndVisible(displayOutput, maxContentWidth)} │\\n`;\n    }\n\n    // 生成底部框线\n    const bottomBorder = '─'.repeat(boxWidth - 2); // 减去 \"└\" + \"┘\"\n    output += `└${bottomBorder}┘`;\n\n    return output;\n  }\n\n  /**\n   * 安全截断包含ANSI代码的文本\n   */\n  private truncateWithAnsi(text: string, maxLength: number): string {\n    let visibleLength = 0;\n    let result = '';\n    let i = 0;\n\n    while (i < text.length && visibleLength < maxLength) {\n      if (text[i] === '\\x1b' && text[i + 1] === '[') {\n        // 遇到ANSI转义序列，找到结束位置\n        const ansiStart = i;\n        i += 2;\n        while (i < text.length && !/[a-zA-Z]/.test(text[i] || '')) {\n          i++;\n        }\n        if (i < text.length) i++; // 包含结束字母\n        result += text.substring(ansiStart, i);\n      } else {\n        // 普通字符\n        result += text[i];\n        visibleLength++;\n        i++;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * 格式化标题\n   */\n  private formatTitle(title: string, capabilities: TerminalCapabilities): string {\n    if (capabilities.colors) {\n      return `\\x1b[1;36m${title}\\x1b[0m`;\n    }\n    return title;\n  }\n\n  /**\n   * 格式化分隔线\n   */\n  private formatSeparator(capabilities: TerminalCapabilities): string {\n    const line = '─'.repeat(70);\n    if (capabilities.colors) {\n      return `\\x1b[90m${line}\\x1b[0m`;\n    }\n    return line;\n  }\n\n  /**\n   * 清屏\n   */\n  private clearScreen(): void {\n    // 清屏并移动光标到顶部\n    process.stdout.write('\\x1b[2J\\x1b[H');\n  }\n\n  /**\n   * 处理键盘输入 (用于交互式模式)\n   */\n  private setupKeyboardHandling(): void {\n    if (process.stdin.isTTY) {\n      process.stdin.setRawMode(true);\n      process.stdin.resume();\n      process.stdin.setEncoding('utf8');\n\n      process.stdin.on('data', (key: string) => {\n        switch (key) {\n          case 'c':\n            // 打开配置编辑器\n            break;\n          case 't':\n            // 切换主题\n            break;\n          case 'p':\n            // 切换预设\n            break;\n          case 'r':\n            // 刷新\n            this.renderLivePreview();\n            break;\n          case 'q':\n          case '\\u0003': // Ctrl+C\n            this.stopLivePreview();\n            break;\n        }\n      });\n    }\n  }\n\n  /**\n   * 获取当前配置\n   */\n  getCurrentConfig(): Config {\n    return this.currentConfig;\n  }\n\n  /**\n   * 获取可用场景列表\n   */\n  getAvailableScenarios(): string[] {\n    return this.mockGenerator.getAvailableScenarios();\n  }\n}\n\n/**\n * 工厂函数 - 创建预览引擎实例\n */\nexport function createLivePreviewEngine(options?: LivePreviewOptions): LivePreviewEngine {\n  return new LivePreviewEngine(options);\n}\n","/**\n * CLI消息图标管理器 | CLI message icon manager\n * 复用终端检测机制，为CLI消息提供三层回退图标系统\n *\n * @author wangnov\n * @date 2025-08-12T20:30:20+08:00\n */\n\nimport type { TerminalCapabilities } from '../terminal/detector.js';\nimport { detect } from '../terminal/detector.js';\n\n/**\n * CLI消息图标映射接口 | CLI message icon mapping interface\n */\nexport interface CliIconMap {\n  [iconName: string]: string;\n}\n\n/**\n * CLI消息图标管理器构造选项 | CLI message icon manager constructor options\n */\nexport interface CliMessageIconOptions {\n  enableColors?: boolean | 'auto';\n  enableEmoji?: boolean | 'auto';\n  enableNerdFont?: boolean | 'auto';\n  forceNerdFont?: boolean;\n}\n\n/**\n * CLI消息图标管理器 | CLI message icon manager\n * 为CLI界面提供统一的图标管理，支持三层回退\n */\nexport class CliMessageIconManager {\n  private capabilities: TerminalCapabilities;\n  private icons: CliIconMap;\n\n  constructor(options: CliMessageIconOptions = {}) {\n    this.capabilities = detect(\n      options.enableColors,\n      options.enableEmoji,\n      options.enableNerdFont,\n      options.forceNerdFont || false\n    );\n    this.icons = this.setupCliIcons();\n  }\n\n  /**\n   * 获取图标 | Get icon\n   */\n  public getIcon(iconName: string): string {\n    return this.icons[iconName] || '';\n  }\n\n  /**\n   * 设置CLI图标系统 | Setup CLI icon system\n   */\n  private setupCliIcons(): CliIconMap {\n    // 第一层：Nerd Font图标 (Font Awesome系列) | First tier: Nerd Font icons\n    const nerdFontIcons: CliIconMap = {\n      // 状态图标 | Status icons\n      success: '\\uf00c', // fa-check\n      error: '\\uf00d', // fa-times\n      warning: '\\uf071', // fa-exclamation-triangle\n      info: '\\uf05a', // fa-info-circle\n\n      // 功能图标 | Function icons\n      config: '\\uf013', // fa-cog\n      file: '\\uf15b', // fa-file-o\n      folder: '\\uf07b', // fa-folder\n      theme: '\\uf0c7', // fa-floppy-o\n      edit: '\\uf044', // fa-edit\n      validate: '\\uf058', // fa-check-circle\n      reset: '\\uf0e2', // fa-undo\n\n      // 诊断图标 | Diagnostic icons\n      doctor: '\\uf0f8', // fa-stethoscope\n      platform: '\\uf109', // fa-desktop\n      terminal: '\\uf120', // fa-terminal\n\n      // 交互图标 | Interactive icons\n      goodbye: '\\uf164', // fa-thumbs-up\n      prompt: '\\uf059', // fa-question-circle\n    };\n\n    // 第二层：Emoji图标 | Second tier: Emoji icons\n    const emojiIcons: CliIconMap = {\n      // 状态图标 | Status icons\n      success: '✅',\n      error: '❌',\n      warning: '⚠️',\n      info: 'ℹ️',\n\n      // 功能图标 | Function icons\n      config: '⚙️',\n      file: '📄',\n      folder: '📁',\n      theme: '🎨',\n      edit: '✏️',\n      validate: '🔍',\n      reset: '🔄',\n\n      // 诊断图标 | Diagnostic icons\n      doctor: '🔍',\n      platform: '💻',\n      terminal: '📟',\n\n      // 交互图标 | Interactive icons\n      goodbye: '👋',\n      prompt: '❓',\n    };\n\n    // 第三层：文本图标 | Third tier: Text icons\n    const textIcons: CliIconMap = {\n      // 状态图标 | Status icons\n      success: '[OK]',\n      error: '[ERR]',\n      warning: '[WARN]',\n      info: '[INFO]',\n\n      // 功能图标 | Function icons\n      config: '[CFG]',\n      file: '[FILE]',\n      folder: '[DIR]',\n      theme: '[THEME]',\n      edit: '[EDIT]',\n      validate: '[CHECK]',\n      reset: '[RESET]',\n\n      // 诊断图标 | Diagnostic icons\n      doctor: '[DIAG]',\n      platform: '[PLAT]',\n      terminal: '[TERM]',\n\n      // 交互图标 | Interactive icons\n      goodbye: '[BYE]',\n      prompt: '[?]',\n    };\n\n    // 根据终端能力选择图标集 | Select icon set based on capabilities\n    if (this.capabilities.nerdFont) {\n      return nerdFontIcons;\n    } else if (this.capabilities.emoji) {\n      return emojiIcons;\n    } else {\n      return textIcons;\n    }\n  }\n\n  /**\n   * 格式化消息与图标 | Format message with icon\n   */\n  public format(iconName: string, message: string): string {\n    const icon = this.getIcon(iconName);\n    return icon ? `${icon} ${message}` : message;\n  }\n\n  /**\n   * 获取终端能力信息 | Get terminal capabilities\n   */\n  public getCapabilities(): TerminalCapabilities {\n    return { ...this.capabilities };\n  }\n\n  /**\n   * 强制刷新终端检测 | Force refresh terminal detection\n   */\n  public refresh(options: CliMessageIconOptions = {}): void {\n    this.capabilities = detect(\n      options.enableColors,\n      options.enableEmoji,\n      options.enableNerdFont,\n      options.forceNerdFont || false\n    );\n    this.icons = this.setupCliIcons();\n  }\n}\n\n/**\n * 全局CLI图标管理器实例 | Global CLI icon manager instance\n */\nlet globalCliIconManager: CliMessageIconManager | null = null;\n\n/**\n * 获取全局CLI图标管理器 | Get global CLI icon manager\n */\nexport function getCliIconManager(): CliMessageIconManager {\n  if (!globalCliIconManager) {\n    globalCliIconManager = new CliMessageIconManager();\n  }\n  return globalCliIconManager;\n}\n\n/**\n * 便捷函数：格式化CLI消息 | Convenience function: format CLI message\n */\nexport function formatCliMessage(iconName: string, message: string): string {\n  return getCliIconManager().format(iconName, message);\n}\n\n/**\n * 便捷函数：获取CLI图标 | Convenience function: get CLI icon\n */\nexport function getCliIcon(iconName: string): string {\n  return getCliIconManager().getIcon(iconName);\n}\n","import { type InputData, InputDataSchema } from '../config/schema.js';\n\n/**\n * 解析结果接口 | Parse result interface\n */\nexport interface ParseResult {\n  success: boolean;\n  data?: InputData;\n  error?: string;\n}\n\n/**\n * 从stdin读取输入 | Read input from stdin\n */\nexport async function readFromStdin(): Promise<string> {\n  return new Promise((resolve, reject) => {\n    let input = '';\n\n    // 设置超时 | Set timeout\n    const timeout = setTimeout(() => {\n      reject(new Error('Input timeout'));\n    }, 5000);\n\n    process.stdin.setEncoding('utf8');\n\n    process.stdin.on('readable', () => {\n      let chunk: string | null;\n      // 使用显式赋值避免表达式中的赋值\n      chunk = process.stdin.read();\n      while (chunk !== null) {\n        input += chunk;\n        chunk = process.stdin.read();\n      }\n    });\n\n    process.stdin.on('end', () => {\n      clearTimeout(timeout);\n      resolve(input);\n    });\n\n    process.stdin.on('error', (error) => {\n      clearTimeout(timeout);\n      reject(error);\n    });\n  });\n}\n\n/**\n * 创建默认输入数据 | Create default input data\n */\nfunction createDefaultInputData(): InputData {\n  return {\n    hookEventName: 'Status',\n    sessionId: null,\n    transcriptPath: null,\n    cwd: process.cwd(),\n    model: {},\n    workspace: {\n      current_dir: process.cwd(),\n      project_dir: process.cwd(),\n    },\n    gitBranch: null,\n  };\n}\n\n/**\n * 解析JSON输入 | Parse JSON input\n */\nexport function parseJson(input: string): ParseResult {\n  try {\n    // 处理空输入 | Handle empty input\n    if (!input.trim()) {\n      return {\n        success: true,\n        data: createDefaultInputData(),\n      };\n    }\n\n    // 解析JSON | Parse JSON\n    const rawData = JSON.parse(input);\n\n    // 使用Zod验证和转换数据 | Use Zod to validate and transform data\n    const result = InputDataSchema.safeParse(rawData);\n\n    if (result.success) {\n      return {\n        success: true,\n        data: result.data,\n      };\n    } else {\n      return {\n        success: false,\n        error: `Input validation failed: ${result.error.message}`,\n      };\n    }\n  } catch (error) {\n    // JSON解析失败，尝试创建默认数据 | JSON parse failed, try to create default data\n    if (error instanceof SyntaxError) {\n      return {\n        success: false,\n        error: `Invalid JSON: ${error.message}`,\n      };\n    }\n\n    return {\n      success: false,\n      error: `Parse error: ${error instanceof Error ? error.message : String(error)}`,\n    };\n  }\n}\n\n/**\n * 解析输入并处理官方标准格式 | Parse input and handle official standard format\n */\nexport async function parseInput(): Promise<ParseResult> {\n  try {\n    const input = await readFromStdin();\n    return parseJson(input);\n  } catch (_error) {\n    // stdin读取失败，使用默认数据 | stdin read failed, use default data\n    return {\n      success: true,\n      data: createDefaultInputData(),\n    };\n  }\n}\n\n/**\n * 验证输入数据格式 | Validate input data format\n */\nexport function validate(data: unknown): ParseResult {\n  try {\n    const result = InputDataSchema.safeParse(data);\n\n    if (result.success) {\n      return {\n        success: true,\n        data: result.data,\n      };\n    } else {\n      return {\n        success: false,\n        error: `Validation failed: ${result.error.message}`,\n      };\n    }\n  } catch (error) {\n    return {\n      success: false,\n      error: `Validation error: ${error instanceof Error ? error.message : String(error)}`,\n    };\n  }\n}\n\n/**\n * 处理命令行参数 | Handle command line arguments\n */\nexport function parseArguments(args: string[]): Partial<InputData> {\n  const parsed: Partial<InputData> = {};\n\n  for (let i = 0; i < args.length; i++) {\n    const arg = args[i];\n    const nextArg = args[i + 1];\n\n    switch (arg) {\n      case '--transcript-path':\n      case '-t':\n        if (nextArg && !nextArg.startsWith('-')) {\n          parsed.transcriptPath = nextArg;\n          i++;\n        }\n        break;\n\n      case '--cwd':\n      case '-c':\n        if (nextArg && !nextArg.startsWith('-')) {\n          parsed.cwd = nextArg;\n          i++;\n        }\n        break;\n\n      case '--model':\n      case '-m':\n        if (nextArg && !nextArg.startsWith('-')) {\n          parsed.model = { id: nextArg };\n          i++;\n        }\n        break;\n\n      case '--branch':\n      case '-b':\n        if (nextArg && !nextArg.startsWith('-')) {\n          parsed.gitBranch = nextArg;\n          i++;\n        }\n        break;\n    }\n  }\n\n  return parsed;\n}\n\n/**\n * 合并输入数据 | Merge input data\n */\nexport function mergeInputData(base: InputData, override: Partial<InputData>): InputData {\n  return {\n    ...base,\n    ...override,\n    model: { ...base.model, ...override.model },\n    workspace: { ...base.workspace, ...override.workspace },\n  };\n}\n\n/**\n * 获取调试信息 | Get debug information\n */\nexport function getDebugInfo(data: InputData): Record<string, unknown> {\n  return {\n    hookEventName: data.hookEventName,\n    sessionId: data.sessionId,\n    transcriptPath: data.transcriptPath,\n    cwd: data.cwd,\n    model: data.model,\n    workspace: data.workspace,\n    gitBranch: data.gitBranch,\n    env: {\n      PWD: process.env.PWD,\n      HOME: process.env.HOME,\n      USER: process.env.USER,\n      TERM: process.env.TERM,\n      TERM_PROGRAM: process.env.TERM_PROGRAM,\n    },\n  };\n}\n\n/**\n * @deprecated Legacy class - use individual functions instead\n * 向后兼容性的遗留类 - 请使用独立函数\n */\n// Note: This class has been removed to improve code quality.\n// Use the exported functions directly instead.\n","/**\n * 工具函数集合\n * 提供常用的工具函数和辅助方法\n */\n\n/**\n * 格式化字节大小\n */\nexport function formatBytes(bytes: number): string {\n  if (bytes === 0) return '0 B';\n  const k = 1024;\n  const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return `${parseFloat((bytes / k ** i).toFixed(1))} ${sizes[i]}`;\n}\n\n/**\n * 格式化数字为千位分隔符形式\n */\nexport function formatNumber(num: number): string {\n  return num.toLocaleString();\n}\n\n/**\n * 截断字符串到指定长度\n */\nexport function truncateString(str: string, maxLength: number, suffix = '...'): string {\n  if (str.length <= maxLength) return str;\n  return str.substring(0, maxLength - suffix.length) + suffix;\n}\n\n/**\n * 获取项目名称从路径\n */\nexport function getProjectName(projectPath: string): string {\n  return projectPath.split('/').filter(Boolean).pop() || 'unknown';\n}\n\n/**\n * 计算百分比\n */\nexport function calculatePercentage(used: number, total: number): number {\n  if (total === 0) return 0;\n  return Math.round((used / total) * 100);\n}\n\n/**\n * 生成进度条\n */\nexport function generateProgressBar(\n  percentage: number,\n  length = 10,\n  fillChar = '█',\n  emptyChar = '░',\n  warningThreshold = 60,\n  criticalThreshold = 95\n): string {\n  const filled = Math.round((percentage / 100) * length);\n  const empty = length - filled;\n\n  // 根据阈值选择不同的字符\n  let progressChar = fillChar;\n  if (percentage >= criticalThreshold) {\n    progressChar = '🔥'; // 临界状态\n  } else if (percentage >= warningThreshold) {\n    progressChar = '▓'; // 警告状态\n  }\n\n  return progressChar.repeat(filled) + emptyChar.repeat(empty);\n}\n\n/**\n * 获取Git分支简化名称\n */\nexport function simplifyBranchName(branchName: string, maxLength = 20): string {\n  // 移除常见前缀\n  let simplified = branchName.replace(/^(origin\\/|refs\\/heads\\/|refs\\/remotes\\/)/, '');\n\n  // 如果太长，截断并保留重要部分\n  if (simplified.length > maxLength) {\n    const parts = simplified.split(/[-_/]/);\n    if (parts.length > 1) {\n      // 保留最后一部分和第一部分的前几个字符\n      const lastPart = parts[parts.length - 1];\n      const firstPart =\n        parts[0]?.substring(0, Math.max(3, maxLength - (lastPart?.length || 0) - 3)) || '';\n      simplified = `${firstPart}...${lastPart || ''}`;\n    } else {\n      simplified = truncateString(simplified, maxLength);\n    }\n  }\n\n  return simplified;\n}\n\n/**\n * 深度合并对象\n */\nexport function deepMerge<T extends Record<string, unknown>>(target: T, source: Partial<T>): T {\n  const result = { ...target };\n\n  for (const key in source) {\n    if (source[key] !== undefined) {\n      if (\n        typeof source[key] === 'object' &&\n        source[key] !== null &&\n        !Array.isArray(source[key]) &&\n        typeof result[key] === 'object' &&\n        result[key] !== null &&\n        !Array.isArray(result[key])\n      ) {\n        result[key] = deepMerge(\n          result[key] as Record<string, unknown>,\n          source[key] as Record<string, unknown>\n        ) as T[Extract<keyof T, string>];\n      } else {\n        result[key] = source[key] as T[Extract<keyof T, string>];\n      }\n    }\n  }\n\n  return result;\n}\n\n/**\n * 检测操作系统\n */\nexport function getOS(): 'windows' | 'macos' | 'linux' | 'unknown' {\n  const platform = process.platform;\n  switch (platform) {\n    case 'win32':\n      return 'windows';\n    case 'darwin':\n      return 'macos';\n    case 'linux':\n      return 'linux';\n    default:\n      return 'unknown';\n  }\n}\n\n/**\n * 安全的JSON解析\n */\nexport function safeJsonParse<T = unknown>(str: string, fallback: T): T {\n  try {\n    return JSON.parse(str);\n  } catch {\n    return fallback;\n  }\n}\n\n/**\n * 防抖函数\n */\nexport function debounce<T extends (...args: unknown[]) => void>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout;\n\n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func(...args), wait);\n  };\n}\n\n/**\n * 节流函数\n */\nexport function throttle<T extends (...args: unknown[]) => void>(\n  func: T,\n  limit: number\n): (...args: Parameters<T>) => void {\n  let inThrottle: boolean;\n\n  return (...args: Parameters<T>) => {\n    if (!inThrottle) {\n      func(...args);\n      inThrottle = true;\n      setTimeout(() => {\n        inThrottle = false;\n      }, limit);\n    }\n  };\n}\n\n/**\n * 生成随机ID\n */\nexport function generateId(prefix = '', length = 8): string {\n  const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n  let result = prefix;\n  for (let i = 0; i < length; i++) {\n    result += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n  return result;\n}\n\n/**\n * 时间格式化\n */\nexport function formatTime(date: Date = new Date()): string {\n  return date.toLocaleTimeString('zh-CN', {\n    hour12: false,\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n  });\n}\n\n/**\n * 获取相对时间描述\n */\nexport function getRelativeTime(timestamp: string | Date): string {\n  const now = new Date();\n  const time = new Date(timestamp);\n  const diff = now.getTime() - time.getTime();\n  const seconds = Math.floor(diff / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  if (seconds < 60) return `${seconds}秒前`;\n  if (minutes < 60) return `${minutes}分钟前`;\n  if (hours < 24) return `${hours}小时前`;\n  if (days < 7) return `${days}天前`;\n\n  return time.toLocaleDateString('zh-CN');\n}\n"],"mappings":"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","names":["path","fs","TOML","import_node_path","path","import_node_fs","import_node_fs","result","input","ConfigLoader","StatuslineGenerator"]}