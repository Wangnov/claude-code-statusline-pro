name: build-binaries

on:
  workflow_dispatch:

permissions:
  contents: read
  actions: write

jobs:
  build:
    name: build ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux-x64
            binary: claude-code-statusline-pro
            artifact: linux-x64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            platform: linux-arm64
            binary: claude-code-statusline-pro
            artifact: linux-arm64
            setup: install-linux-arm-toolchain
          - os: macos-13
            target: x86_64-apple-darwin
            platform: darwin-x64
            binary: claude-code-statusline-pro
            artifact: darwin-x64
          - os: macos-14
            target: aarch64-apple-darwin
            platform: darwin-arm64
            binary: claude-code-statusline-pro
            artifact: darwin-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: win32-x64
            binary: claude-code-statusline-pro.exe
            artifact: win32-x64
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            platform: win32-arm64
            binary: claude-code-statusline-pro.exe
            artifact: win32-arm64

    steps:
      - uses: actions/checkout@v4

      - name: Install cross toolchain
        if: matrix.setup == 'install-linux-arm-toolchain'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build ${{ matrix.target }}
        run: cargo build --release --target ${{ matrix.target }}

      - name: Collect artifact
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/${{ matrix.binary }} artifacts/
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: artifacts/${{ matrix.binary }}

  assemble-npm:
    name: assemble npm package
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          path: dist/artifacts

      - name: Arrange binaries for npm packages
        run: |
          set -euo pipefail

          declare -a PLATFORMS=(
            "darwin-arm64:claude-code-statusline-pro:ccstatus"
            "darwin-x64:claude-code-statusline-pro:ccstatus"
            "linux-x64:claude-code-statusline-pro:ccstatus"
            "linux-arm64:claude-code-statusline-pro:ccstatus"
            "win32-x64:claude-code-statusline-pro.exe:ccstatus.exe"
            "win32-arm64:claude-code-statusline-pro.exe:ccstatus.exe"
          )

          for entry in "${PLATFORMS[@]}"; do
            IFS=":" read -r platform sourceBinary destBinary <<<"$entry"
            pkg_dir="npm/platforms/ccstatus-${platform}/bin"
            mkdir -p "${pkg_dir}"

            artifact_path="dist/artifacts/${platform}/${sourceBinary}"
            if [ -f "${artifact_path}" ]; then
              cp "${artifact_path}" "${pkg_dir}/${destBinary}"
              if [[ "${destBinary}" != *.exe ]]; then
                chmod +x "${pkg_dir}/${destBinary}"
              fi
              rm -f "${pkg_dir}/.gitkeep"
            else
              echo "No artifact found for ${platform}, leaving placeholder."
            fi
          done

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Pack platform packages
        run: |
          set -euo pipefail
          packages=(
            ccstatus-darwin-arm64
            ccstatus-darwin-x64
            ccstatus-linux-x64
            ccstatus-linux-arm64
            ccstatus-win32-x64
            ccstatus-win32-arm64
          )
          for pkg in "${packages[@]}"; do
            npm --prefix "npm/platforms/${pkg}" pack
          done

      - name: Pack ccstatus
        run: npm --prefix npm/ccstatus pack

      - name: Pack legacy package
        run: npm --prefix npm/claude-code-statusline-pro pack

      - name: Upload npm tarballs
        uses: actions/upload-artifact@v4
        with:
          name: npm-packages
          path: |
            npm/platforms/*/*.tgz
            npm/ccstatus/*.tgz
            npm/claude-code-statusline-pro/*.tgz
